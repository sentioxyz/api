// This file is auto-generated by @hey-api/openapi-ts

export type AlertServiceAlert = {
    id?: string;
    ruleId?: string;
    active?: boolean;
    query?: string;
    startTime?: string;
    endTime?: string;
    lastNotified?: string;
    createState?: AlertServiceAlertAlertState;
    lastState?: AlertServiceAlertAlertState;
};

export type AlertServiceAlertAlertState = {
    condition?: AlertServiceCondition;
    samples?: Array<AlertServiceSample>;
    subject?: string;
    message?: string;
    logCondition?: AlertServiceLogCondition;
    logSamples?: Array<CommonEventLogEntry>;
    time?: string;
    state?: AlertServiceAlertRuleState;
    queryTimeRange?: CommonTimeRangeLite;
};

export type AlertServiceAlertRule = {
    id?: string;
    projectId?: string;
    state?: AlertServiceAlertRuleState;
    subject?: string;
    message?: string;
    group?: string;
    query?: string;
    for?: CommonDuration;
    channels?: Array<CommonChannel>;
    updateTime?: string;
    condition?: AlertServiceCondition;
    renotifyDuration?: CommonDuration;
    renotifyLimit?: number;
    alertType?: AlertServiceAlertType;
    logCondition?: AlertServiceLogCondition;
    lastQueryTime?: string;
    mute?: boolean;
    interval?: CommonDuration;
};

export type AlertServiceAlertRuleState = 'NO_DATA' | 'FIRING' | 'NORMAL';

export type AlertServiceAlertServiceSaveAlertRuleBody = {
    rule?: {
        projectId?: string;
        state?: AlertServiceAlertRuleState;
        subject?: string;
        message?: string;
        group?: string;
        query?: string;
        for?: CommonDuration;
        channels?: Array<CommonChannel>;
        updateTime?: string;
        condition?: AlertServiceCondition;
        renotifyDuration?: CommonDuration;
        renotifyLimit?: number;
        alertType?: AlertServiceAlertType;
        logCondition?: AlertServiceLogCondition;
        lastQueryTime?: string;
        mute?: boolean;
        interval?: CommonDuration;
    };
};

export type AlertServiceAlertType = 'METRIC' | 'LOG';

export type AlertServiceCondition = {
    queries?: Array<CommonQuery>;
    formula?: CommonFormula;
    comparisonOp?: string;
    threshold?: number;
    eventsQueries?: Array<CommonSegmentationQuery>;
    priceQueries?: Array<CommonPriceSegmentationQuery>;
    insightQueries?: Array<AlertServiceConditionInsightQuery>;
};

export type AlertServiceConditionInsightQuery = {
    metricsQuery?: CommonQuery;
    eventsQuery?: CommonSegmentationQuery;
    priceQuery?: CommonPriceSegmentationQuery;
    sourceName?: string;
};

export type AlertServiceGetAlertResponse = {
    alertRule?: AlertServiceAlertRule;
    alerts?: Array<AlertServiceAlert>;
    mute?: AlertServiceMute;
};

export type AlertServiceGetAlertRulesResponse = {
    rules?: Array<AlertServiceAlertRule>;
};

export type AlertServiceLogCondition = {
    query?: string;
    comparisonOp?: string;
    threshold?: number;
};

export type AlertServiceMute = {
    id?: string;
    ruleId?: string;
    group?: string;
    active?: boolean;
    startTime?: string;
    endTime?: string;
    updateTime?: string;
};

export type AlertServiceSample = {
    metric?: {
        [key: string]: string;
    };
    value?: number;
    timestamp?: string;
};

export type AlertServiceSaveAlertRuleRequest = {
    rule?: AlertServiceAlertRule;
};

export type AnalyticServiceAnalyticServiceExecuteSqlAsyncBody = {
    projectId?: string;
    version?: number;
    sqlQuery?: AnalyticServiceSqlQuery;
    /**
     * Pagination cursor for the next page of results, using the value from the previous response.
     */
    cursor?: string;
    cachePolicy?: CommonCachePolicy;
};

export type AnalyticServiceAnalyticServiceExecuteSqlBody = {
    projectId?: string;
    version?: number;
    sqlQuery?: AnalyticServiceSqlQuery;
    /**
     * Pagination cursor for the next page of results, using the value from the previous response.
     */
    cursor?: string;
    cachePolicy?: CommonCachePolicy;
};

export type AnalyticServiceAnalyticServiceSaveRefreshableMaterializedViewBody = {
    projectId?: string;
    name?: string;
    sql?: string;
    refreshSettings?: AnalyticServiceViewRefreshSettings;
};

export type AnalyticServiceAnalyticServiceSaveSqlBody = {
    projectId?: string;
    version?: number;
    sqlQuery?: AnalyticServiceSqlQuery;
    source?: AnalyticServiceSource;
};

export type AnalyticServiceAsyncExecuteSqlResponse = {
    queryId?: string;
    executionId?: string;
    queueLength?: number;
    computeStats?: CommonComputeStats;
};

export type AnalyticServiceExecutionInfo = {
    queryId?: string;
    executionId?: string;
    status?: AnalyticServiceExecutionStatus;
    scheduledAt?: string;
    startedAt?: string;
    finishedAt?: string;
    result?: CommonTabularData;
    error?: string;
    computeStats?: CommonComputeStats;
    processorVersion?: number;
};

export type AnalyticServiceExecutionStatus = 'PENDING' | 'RUNNING' | 'FINISHED' | 'KILLED';

export type AnalyticServiceGetRefreshableMaterializedViewStatusResponse = {
    name?: string;
    status?: string;
    lastRefreshTime?: string;
    lastSuccessTime?: string;
    nextRefreshTime?: string;
    progress?: string;
    readRows?: string;
    readBytes?: string;
    totalRows?: string;
    writtenRows?: string;
    writtenBytes?: string;
    sql?: string;
    refreshSettings?: AnalyticServiceViewRefreshSettings;
    computeStats?: CommonComputeStats;
    exception?: string;
};

export type AnalyticServiceListRefreshableMaterializedViewResponse = {
    total?: string;
    views?: Array<AnalyticServiceListRefreshableMaterializedViewResponseRefreshableMaterializedView>;
};

export type AnalyticServiceListRefreshableMaterializedViewResponseRefreshableMaterializedView = {
    name?: string;
    sql?: string;
};

export type AnalyticServiceLogQueryRequestFilter = {
    field?: string;
    value?: string;
    not?: boolean;
};

export type AnalyticServiceLogQueryRequestSort = {
    field?: string;
    desc?: boolean;
};

export type AnalyticServiceLogQueryResponse = {
    entries?: Array<CommonEventLogEntry>;
    after?: Array<CommonAny>;
    total?: string;
};

export type AnalyticServiceQuerySqlExecutionDetailResponse = {
    computeStats?: CommonComputeStats;
};

export type AnalyticServiceQuerySqlResultResponse = {
    executionInfo?: AnalyticServiceExecutionInfo;
};

export type AnalyticServiceQuerySegmentationResponse = {
    results?: Array<AnalyticServiceQuerySegmentationResponseResult>;
};

export type AnalyticServiceQuerySegmentationResponseResult = {
    matrix?: CommonMatrix;
    error?: string;
    alias?: string;
    id?: string;
    computeStats?: CommonComputeStats;
};

export type AnalyticServiceSqlQuery = {
    sql?: string;
    size?: number;
    parameters?: CommonRichStruct;
    /**
     * the name of the query, if sql is empty and name not empty, the query will be fetched by the name.
     */
    name?: string;
    /**
     * the id of the query, if sql and name both empty, the query will be fetched by the id.
     */
    queryId?: string;
};

export type AnalyticServiceSaveRefreshableMaterializedViewResponse = {
    name?: string;
    isUpdated?: boolean;
};

export type AnalyticServiceSaveSqlResponse = {
    queryId?: string;
};

export type AnalyticServiceSearchServiceQueryLogBody = {
    projectId?: string;
    query?: string;
    timeRange?: CommonTimeRange;
    sorts?: Array<AnalyticServiceLogQueryRequestSort>;
    after?: Array<CommonAny>;
    limit?: number;
    offset?: number;
    filters?: Array<AnalyticServiceLogQueryRequestFilter>;
    version?: number;
};

export type AnalyticServiceSegmentationRequest = {
    projectOwner?: string;
    projectSlug?: string;
    projectId?: string;
    version?: number;
    timeRange?: CommonTimeRangeLite;
    queries?: Array<CommonSegmentationQuery>;
    formulas?: Array<CommonFormula>;
    systemSqlQueries?: Array<CommonSystemSqlQuery>;
    debug?: boolean;
    limit?: number;
    offset?: number;
};

export type AnalyticServiceSource = 'SQL_EDITOR' | 'DASHBOARD' | 'ASYNC_TRIGGER' | 'CURL' | 'ENDPOINT';

export type AnalyticServiceSyncExecuteSqlResponse = {
    runtimeCost?: string;
    result?: CommonTabularData;
    error?: string;
    computeStats?: CommonComputeStats;
};

export type AnalyticServiceViewRefreshSettings = {
    refreshInterval?: string;
    strategy?: AnalyticServiceViewRefreshSettingsRefreshStrategy;
    dependsOn?: Array<string>;
    appendMode?: boolean;
    orderBy?: string;
};

export type AnalyticServiceViewRefreshSettingsRefreshStrategy = 'EVERY' | 'AFTER';

export type CommonAggregate = {
    op?: CommonAggregateAggregateOps;
    grouping?: Array<string>;
};

export type CommonAggregateAggregateOps = 'AVG' | 'SUM' | 'MIN' | 'MAX' | 'COUNT';

export type CommonAny = {
    intValue?: number;
    longValue?: string;
    doubleValue?: number;
    stringValue?: string;
    boolValue?: boolean;
    dateValue?: string;
    listValue?: CommonStringList;
};

export type CommonArgument = {
    stringValue?: string;
    intValue?: number;
    doubleValue?: number;
    boolValue?: boolean;
    durationValue?: CommonDuration;
};

export type CommonBigDecimal = {
    value?: CommonBigInteger;
    exp?: number;
};

export type CommonBigInteger = {
    negative?: boolean;
    data?: string;
};

export type CommonCachePolicy = {
    cacheTtlSecs?: number;
    cacheRefreshTtlSecs?: number;
    forceRefresh?: boolean;
    noCache?: boolean;
};

export type CommonChannel = {
    id?: string;
    projectId?: string;
    type?: CommonChannelType;
    slackWebhookUrl?: string;
    emailAddress?: string;
    name?: string;
    customWebhookUrl?: string;
    customHeaders?: {
        [key: string]: string;
    };
    telegramReference?: string;
    telegramChatId?: string;
    slackTeam?: string;
    slackChannel?: string;
    pagerdutyConfig?: {
        [key: string]: unknown;
    };
};

export type CommonChannelType = 'UNKNOWN' | 'EMAIL' | 'SLACK' | 'TELEGRAM' | 'WEBHOOK' | 'DISCORD' | 'PAGERDUTY';

export type CommonCohortsFilter = {
    symbol?: boolean;
    name?: string;
    aggregation?: CommonCohortsFilterAggregation;
    selectorExpr?: CommonSelectorExpr;
    timeRange?: CommonTimeRangeLite;
};

export type CommonCohortsFilterAggregation = {
    total?: CommonCohortsFilterAggregationTotal;
    aggregateProperties?: CommonCohortsFilterAggregationAggregateProperties;
    operator?: CommonCohortsFilterAggregationOperatorType;
    value?: Array<CommonAny>;
};

export type CommonCohortsFilterAggregationAggregateProperties = {
    type?: CommonCohortsFilterAggregationAggregatePropertiesAggregationType;
    propertyName?: string;
};

export type CommonCohortsFilterAggregationAggregatePropertiesAggregationType = 'SUM' | 'AVG' | 'MEDIAN' | 'MIN' | 'MAX' | 'DISTINCT_COUNT' | 'LAST' | 'FIRST';

export type CommonCohortsFilterAggregationOperatorType = 'EQ' | 'NEQ' | 'GT' | 'GTE' | 'LT' | 'LTE' | 'BETWEEN' | 'NOT_BETWEEN';

export type CommonCohortsFilterAggregationTotal = {
    [key: string]: unknown;
};

export type CommonCohortsGroup = {
    joinOperator?: CommonJoinOperator;
    filters?: Array<CommonCohortsFilter>;
};

export type CommonCohortsQuery = {
    joinOperator?: CommonJoinOperator;
    groups?: Array<CommonCohortsGroup>;
    name?: string;
    id?: string;
};

export type CommonCoinId = {
    symbol?: string;
    address?: CommonCoinIdAddressIdentifier;
};

export type CommonCoinIdAddressIdentifier = {
    address?: string;
    chain?: string;
};

export type CommonColumnState = {
    columnSizing?: {
        [key: string]: number;
    };
    columnVisibility?: {
        [key: string]: boolean;
    };
    columnOrder?: Array<string>;
    sorting?: Array<CommonColumnStateSort>;
};

export type CommonColumnStateSort = {
    id?: string;
    desc?: boolean;
};

export type CommonComputeStats = {
    computedAt?: string;
    computeCostMs?: string;
    binaryVersionHash?: string;
    computedBy?: string;
    isCached?: boolean;
    isRefreshing?: boolean;
    clickhouseStats?: CommonComputeStatsClickhouseStats;
};

export type CommonComputeStatsClickhouseStats = {
    readRows?: string;
    readBytes?: string;
    memoryUsage?: string;
    queryDurationMs?: string;
    resultRows?: string;
    resultBytes?: string;
};

export type CommonDuration = {
    value?: number;
    unit?: string;
};

export type CommonErrorRecord = {
    id?: string;
    namespace?: number;
    code?: number;
    namespaceCode?: number;
    message?: string;
    createdAt?: string;
};

export type CommonEventLogColumn = {
    id?: string;
    size?: number;
    name?: string;
    accessorKey?: string;
    enableHiding?: boolean;
    enableSorting?: boolean;
    enableResizing?: boolean;
};

export type CommonEventLogConfig = {
    columns?: Array<CommonEventLogColumn>;
    state?: CommonColumnState;
};

export type CommonEventLogEntry = {
    message?: string;
    timestamp?: string;
    logLevel?: string;
    logType?: string;
    contractName?: string;
    contractAddress?: string;
    blockNumber?: string;
    chainId?: string;
    attributes?: {
        [key: string]: unknown;
    };
    id?: string;
    transactionHash?: string;
    highlightedMessage?: string;
    distinctId?: string;
    eventName?: string;
    logIndex?: number;
    transactionIndex?: number;
};

/**
 * the formula to combine multiple queries
 */
export type CommonFormula = {
    expression?: string;
    alias?: string;
    id?: string;
    disabled?: boolean;
    functions?: Array<CommonFunction>;
    color?: string;
};

export type CommonFunction = {
    name?: string;
    arguments?: Array<CommonArgument>;
};

export type CommonJoinOperator = 'AND' | 'OR' | 'THEN';

export type CommonMatrix = {
    samples?: Array<CommonMatrixSample>;
    totalSamples?: number;
};

export type CommonMatrixMetric = {
    name?: string;
    labels?: {
        [key: string]: string;
    };
    displayName?: string;
};

export type CommonMatrixSample = {
    metric?: CommonMatrixMetric;
    values?: Array<CommonMatrixValue>;
};

export type CommonMatrixValue = {
    timestamp?: string;
    value?: number;
};

export type CommonOrganization = {
    id?: string;
    oid?: string;
    name?: string;
    createdAt?: string;
    updatedAt?: string;
    members?: Array<CommonOrganizationMember>;
    displayName?: string;
    logoUrl?: string;
    projects?: Array<CommonProjectInfo>;
    tier?: CommonTier;
};

export type CommonOrganizationMember = {
    user?: CommonUserInfo;
    role?: CommonOrganizationRole;
};

export type CommonOrganizationRole = 'ORG_MEMBER' | 'ORG_ADMIN';

export type CommonOwner = {
    user?: CommonUser;
    organization?: CommonOrganization;
    tier?: CommonTier;
};

export type CommonPermission = 'READ' | 'WRITE' | 'ADMIN';

export type CommonPriceSegmentationQuery = {
    id?: string;
    alias?: string;
    coinId?: Array<CommonCoinId>;
    color?: string;
    disabled?: boolean;
};

export type CommonProject = {
    id?: string;
    displayName?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    slug?: string;
    ownerId?: string;
    owner?: CommonOwner;
    visibility?: CommonProjectVisibility;
    type?: CommonProjectType;
    members?: Array<CommonProjectProjectMember>;
    multiVersion?: boolean;
    ownerName?: string;
    notificationChannels?: Array<CommonChannel>;
    views?: Array<CommonProjectView>;
    supersetEnable?: boolean;
    superset?: CommonProjectSuperset;
    enableDisk?: boolean;
    enableMaterializedView?: boolean;
    defaultTimerange?: CommonTimeRangeLite;
};

export type CommonProjectProjectMember = {
    user?: CommonUserInfo;
    role?: string;
};

export type CommonProjectType = 'SENTIO' | 'SUBGRAPH' | 'ACTION';

export type CommonProjectVisibility = 'PUBLIC' | 'PRIVATE';

export type CommonProjectInfo = {
    id?: string;
    displayName?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    slug?: string;
    owner?: string;
    visibility?: CommonProjectVisibility;
    type?: CommonProjectType;
    multiVersion?: boolean;
    supersetEnable?: boolean;
    superset?: CommonProjectSuperset;
    enableDisk?: boolean;
    enableMaterializedView?: boolean;
    defaultTimerange?: CommonTimeRangeLite;
};

export type CommonProjectSuperset = {
    projectId?: string;
    createdAt?: string;
    syncAt?: string;
};

export type CommonProjectVariables = {
    projectId?: string;
    variables?: Array<CommonProjectVariablesVariable>;
};

export type CommonProjectVariablesVariable = {
    key?: string;
    value?: string;
    isSecret?: boolean;
    updatedAt?: string;
};

export type CommonProjectView = {
    id?: string;
    projectId?: string;
    name?: string;
    config?: CommonProjectViewProjectViewConfig;
};

export type CommonProjectViewProjectViewConfig = {
    eventLog?: CommonEventLogConfig;
};

/**
 * the query to fetch metrics data, promql
 */
export type CommonQuery = {
    query?: string;
    alias?: string;
    id?: string;
    labelSelector?: {
        [key: string]: string;
    };
    aggregate?: CommonAggregate;
    functions?: Array<CommonFunction>;
    color?: string;
    disabled?: boolean;
};

export type CommonRetentionQuery = {
    resources?: Array<CommonRetentionQueryResource>;
    criteria?: CommonRetentionQueryCriteria;
    interval?: CommonRetentionQueryInterval;
    selectorExpr?: CommonSelectorExpr;
    groupBy?: Array<string>;
    segmentBy?: Array<CommonSegmentParameter>;
    windowSize?: number;
};

export type CommonRetentionQueryCriteria = 'OnOrAfter' | 'On';

export type CommonRetentionQueryFilter = {
    propertyFilter?: CommonSelectorExpr;
    timeFilter?: CommonRetentionQueryFilterTimeFilter;
};

export type CommonRetentionQueryFilterTimeFilter = {
    type?: CommonRetentionQueryFilterTimeFilterType;
};

export type CommonRetentionQueryFilterTimeFilterType = 'Disable' | 'FirstInTimeRange' | 'FirstInGlobal';

export type CommonRetentionQueryInterval = {
    value?: number;
    unit?: CommonRetentionQueryIntervalUnit;
};

export type CommonRetentionQueryIntervalUnit = 'Day' | 'Week' | 'Month';

export type CommonRetentionQueryResource = {
    eventNames?: Array<string>;
    filter?: CommonRetentionQueryFilter;
};

export type CommonRichStruct = {
    fields?: {
        [key: string]: CommonRichValue;
    };
};

export type CommonRichValue = {
    nullValue?: CommonRichValueNullValue;
    intValue?: number;
    int64Value?: string;
    floatValue?: number;
    bytesValue?: string;
    boolValue?: boolean;
    stringValue?: string;
    timestampValue?: string;
    bigintValue?: CommonBigInteger;
    bigdecimalValue?: CommonBigDecimal;
    listValue?: CommonRichValueList;
    structValue?: CommonRichStruct;
    tokenValue?: CommonTokenAmount;
};

export type CommonRichValueNullValue = 'NULL_VALUE';

export type CommonRichValueList = {
    values?: Array<CommonRichValue>;
};

export type CommonSegmentParameter = {
    cohortId?: string;
    allUsers?: boolean;
};

export type CommonSegmentationQuery = {
    resource?: CommonSegmentationQueryResource;
    alias?: string;
    id?: string;
    aggregation?: CommonSegmentationQueryAggregation;
    selectorExpr?: CommonSegmentationQuerySelectorExpr;
    groupBy?: Array<string>;
    limit?: number;
    functions?: Array<CommonFunction>;
    color?: string;
    disabled?: boolean;
};

export type CommonSegmentationQueryAggregation = {
    total?: CommonSegmentationQueryAggregationTotal;
    unique?: CommonSegmentationQueryAggregationUnique;
    countUnique?: CommonSegmentationQueryAggregationCountUnique;
    aggregateProperties?: CommonSegmentationQueryAggregationAggregateProperties;
};

export type CommonSegmentationQueryAggregationAggregateProperties = {
    type?: CommonSegmentationQueryAggregationAggregatePropertiesAggregationType;
    propertyName?: string;
};

export type CommonSegmentationQueryAggregationAggregatePropertiesAggregationType = 'SUM' | 'CUMULATIVE_SUM' | 'AVG' | 'MEDIAN' | 'MIN' | 'MAX' | 'DISTINCT_COUNT' | 'CUMULATIVE_DISTINCT_COUNT' | 'CUMULATIVE_COUNT' | 'LAST' | 'CUMULATIVE_LAST' | 'FIRST' | 'CUMULATIVE_FIRST' | 'PERCENTILE_25TH' | 'PERCENTILE_75TH' | 'PERCENTILE_90TH' | 'PERCENTILE_95TH' | 'PERCENTILE_99TH';

export type CommonSegmentationQueryAggregationCountUnique = {
    duration?: CommonDuration;
};

export type CommonSegmentationQueryAggregationTotal = {
    [key: string]: unknown;
};

export type CommonSegmentationQueryAggregationUnique = {
    [key: string]: unknown;
};

export type CommonSegmentationQueryResource = {
    name?: string;
    type?: CommonSegmentationQueryResourceType;
    cohortsId?: string;
    cohortsQuery?: CommonCohortsQuery;
};

export type CommonSegmentationQueryResourceType = 'EVENTS' | 'COHORTS';

export type CommonSegmentationQuerySelectorExpr = {
    selector?: CommonSelector;
    logicExpr?: CommonSegmentationQuerySelectorExprLogicExpr;
};

export type CommonSegmentationQuerySelectorExprLogicExpr = {
    expressions?: Array<CommonSegmentationQuerySelectorExpr>;
    operator?: CommonJoinOperator;
};

export type CommonSelector = {
    key?: string;
    operator?: CommonSelectorOperatorType;
    value?: Array<CommonAny>;
};

/**
 * - GT: Numeric operators
 * - CONTAINS: String operators
 */
export type CommonSelectorOperatorType = 'EQ' | 'NEQ' | 'EXISTS' | 'NOT_EXISTS' | 'GT' | 'GTE' | 'LT' | 'LTE' | 'BETWEEN' | 'NOT_BETWEEN' | 'CONTAINS' | 'NOT_CONTAINS' | 'IN_COHORTS' | 'NOT_IN_COHORTS';

export type CommonSelectorExpr = {
    selector?: CommonSelector;
    logicExpr?: CommonSelectorExprLogicExpr;
};

export type CommonSelectorExprLogicExpr = {
    expressions?: Array<CommonSelectorExpr>;
    operator?: CommonJoinOperator;
};

export type CommonStringList = {
    values?: Array<string>;
};

export type CommonSystemSqlQuery = {
    id?: string;
    alias?: string;
    name?: string;
    tableName?: string;
    aggregation?: CommonSystemSqlQueryAggregation;
    selectorExpr?: CommonSelectorExpr;
    groupBy?: Array<string>;
    disabled?: boolean;
};

export type CommonSystemSqlQueryAggregation = {
    total?: CommonSystemSqlQueryAggregationTotal;
    countUnique?: CommonSystemSqlQueryAggregationCountUnique;
    aggregateProperties?: CommonSystemSqlQueryAggregationAggregateProperties;
};

export type CommonSystemSqlQueryAggregationAggregateProperties = {
    type?: CommonSystemSqlQueryAggregationAggregatePropertiesAggregationType;
    propertyName?: string;
};

export type CommonSystemSqlQueryAggregationAggregatePropertiesAggregationType = 'SUM' | 'AVG' | 'MEDIAN' | 'MIN' | 'MAX' | 'DISTINCT_COUNT';

export type CommonSystemSqlQueryAggregationCountUnique = {
    duration?: CommonDuration;
};

export type CommonSystemSqlQueryAggregationTotal = {
    [key: string]: unknown;
};

export type CommonTabularData = {
    columns?: Array<string>;
    columnTypes?: {
        [key: string]: CommonTabularDataColumnType;
    };
    rows?: Array<{
        [key: string]: unknown;
    }>;
    generatedAt?: string;
    /**
     * The pagination cursor for the next page of results. If present, use this value in the `cursor` field of the next request to retrieve subsequent data. If null or empty, there are no more results.
     */
    cursor?: string;
};

export type CommonTabularDataColumnType = 'STRING' | 'NUMBER' | 'BOOLEAN' | 'LIST' | 'TIME' | 'MAP' | 'JSON' | 'TOKEN' | 'DYNAMIC';

export type CommonTier = 'FREE' | 'DEV' | 'PRO' | 'ENTERPRISE' | 'ANONYMOUS';

export type CommonTimeRange = {
    start?: CommonTimeRangeTimeLike;
    end?: CommonTimeRangeTimeLike;
    step?: string;
    interval?: CommonDuration;
    timezone?: string;
};

export type CommonTimeRangeRelativeTime = {
    unit?: string;
    value?: number;
    align?: string;
};

export type CommonTimeRangeTimeLike = {
    relativeTime?: CommonTimeRangeRelativeTime;
    absoluteTime?: string;
};

/**
 * start and end time of the time range, Find more: https://docs.sentio.xyz/reference/data#time-range-configuration-guide
 */
export type CommonTimeRangeLite = {
    start: string;
    end: string;
    step: number;
    timezone?: string;
};

export type CommonTokenAmount = {
    token?: CommonCoinId;
    amount?: CommonBigDecimal;
    specifiedAt?: string;
};

export type CommonUser = {
    id?: string;
    email?: string;
    emailVerified?: boolean;
    lastName?: string;
    firstName?: string;
    locale?: string;
    nickname?: string;
    picture?: string;
    sub?: string;
    updatedAt?: string;
    createdAt?: string;
    username?: string;
    accountStatus?: CommonUserAccountStatus;
    tier?: CommonTier;
};

export type CommonUserAccountStatus = 'PENDING' | 'SET_USERNAME' | 'BANNED' | 'ACTIVE';

/**
 * The same to user but with sensitive data removed.
 */
export type CommonUserInfo = {
    id?: string;
    lastName?: string;
    firstName?: string;
    nickname?: string;
    picture?: string;
    username?: string;
};

export type EvmAccessListItem = {
    address?: string;
    storageKeys?: Array<string>;
};

export type EvmTransaction = {
    blockNumber?: string;
    blockHash?: string;
    transactionIndex?: string;
    hash?: string;
    chainId?: string;
    type?: string;
    from?: string;
    to?: string;
    input?: string;
    value?: string;
    nonce?: string;
    gas?: string;
    gasPrice?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    accessList?: Array<EvmAccessListItem>;
};

export type EvmTransactionReceipt = {
    gasUsed?: string;
    cumulativeGasUsed?: string;
    effectiveGasPrice?: string;
    status?: string;
    error?: string;
    revertReason?: string;
    logs?: Array<{
        [key: string]: unknown;
    }>;
};

export type GoogleApiHttpBody = {
    contentType?: string;
    data?: string;
    extensions?: Array<GoogleProtobufAny>;
};

export type GoogleProtobufAny = {
    '@type'?: string;
    [key: string]: unknown | string | undefined;
};

export type GoogleProtobufNullValue = 'NULL_VALUE';

export type InsightsServiceDataSource = 'METRICS' | 'EVENTS' | 'PRICE' | 'FORMULA' | 'COHORTS' | 'SYSTEM_SQL';

export type InsightsServiceInsightsServiceQueryBody = {
    projectId?: string;
    version?: number;
    timeRange?: CommonTimeRangeLite;
    queries?: Array<InsightsServiceQueryRequestQuery>;
    formulas?: Array<CommonFormula>;
    limit?: number;
    offset?: number;
    bypassCache?: boolean;
    cachePolicy?: CommonCachePolicy;
};

export type InsightsServiceListCoinsResponse = {
    coins?: Array<CommonCoinId>;
    computeStats?: CommonComputeStats;
};

export type InsightsServiceQueryRequestQuery = {
    metricsQuery?: CommonQuery;
    eventsQuery?: CommonSegmentationQuery;
    priceQuery?: CommonPriceSegmentationQuery;
    dataSource?: InsightsServiceDataSource;
    sourceName?: string;
};

export type InsightsServiceQueryResponse = {
    results?: Array<InsightsServiceQueryResponseResult>;
};

export type InsightsServiceQueryResponseResult = {
    id?: string;
    alias?: string;
    dataSource?: InsightsServiceDataSource;
    matrix?: CommonMatrix;
    error?: string;
    computeStats?: CommonComputeStats;
    color?: string;
};

export type MetricsServiceGetMetricsResponse = {
    metrics?: Array<MetricsServiceMetricInfo>;
};

export type MetricsServiceMetricInfo = {
    name?: string;
    displayName?: string;
    projectId?: string;
    contractName?: Array<string>;
    contractAddress?: Array<string>;
    chainId?: Array<string>;
    labels?: {
        [key: string]: MetricsServiceMetricInfoLabelValues;
    };
    metadata?: MetricsServiceMetricMetadata;
};

export type MetricsServiceMetricInfoLabelValues = {
    values?: Array<string>;
};

export type MetricsServiceMetricMetadata = {
    type?: string;
    unit?: string;
    help?: string;
    lastSeen?: string;
};

export type MetricsServiceMetricsQueryResponse = {
    results?: Array<MetricsServiceMetricsQueryResponseResult>;
};

export type MetricsServiceMetricsQueryResponseMatrix = {
    samples?: Array<MetricsServiceMetricsQueryResponseSample>;
    totalSamples?: number;
};

export type MetricsServiceMetricsQueryResponseMetric = {
    name?: string;
    labels?: {
        [key: string]: string;
    };
    displayName?: string;
};

export type MetricsServiceMetricsQueryResponseResult = {
    matrix?: MetricsServiceMetricsQueryResponseMatrix;
    error?: string;
    alias?: string;
    id?: string;
    computeStats?: CommonComputeStats;
};

export type MetricsServiceMetricsQueryResponseSample = {
    metric?: MetricsServiceMetricsQueryResponseMetric;
    values?: Array<MetricsServiceMetricsQueryResponseValue>;
};

export type MetricsServiceMetricsQueryResponseValue = {
    timestamp?: string;
    value?: number;
    extraValues?: Array<number>;
};

export type MetricsServiceObservabilityServiceQueryBody = {
    queries?: Array<CommonQuery>;
    formulas?: Array<CommonFormula>;
    time?: string;
    samplesLimit?: number;
    version?: number;
    timezone?: string;
    samplesOffset?: number;
};

export type MetricsServiceObservabilityServiceQueryRangeBody = {
    queries?: Array<CommonQuery>;
    formulas?: Array<CommonFormula>;
    samplesLimit?: number;
    timeRange: CommonTimeRangeLite;
    projectId?: string;
    version?: number;
    samplesOffset?: number;
};

export type MetricsServiceQueryValueResponse = {
    results?: Array<MetricsServiceQueryValueResponseResult>;
};

export type MetricsServiceQueryValueResponseResult = {
    sample?: Array<MetricsServiceMetricsQueryResponseSample>;
    error?: string;
    alias?: string;
    id?: string;
};

export type PriceServiceAddCoinByGeckoRequest = {
    coingeckoId?: string;
};

export type PriceServiceAddCoinByGeckoResponse = {
    status?: PriceServiceAddCoinByGeckoResponseStatus;
    message?: string;
    currentPrice?: number;
    timestamp?: string;
    symbol?: string;
    coins?: Array<PriceServiceCoinId>;
};

export type PriceServiceAddCoinByGeckoResponseStatus = 'OK' | 'ALREADY_EXISTS' | 'MISMATCH_WITH_EXISTING' | 'GECKO_NOT_FOUND' | 'GECKO_RETURN_NON_SUPPORTED_CHAIN' | 'GECKO_HAS_DUPLICATE_SYMBOL';

export type PriceServiceBatchGetPricesRequest = {
    timestamps?: Array<string>;
    coinIds?: Array<PriceServiceCoinId>;
};

export type PriceServiceBatchGetPricesResponse = {
    prices?: Array<PriceServiceBatchGetPricesResponseCoinPrice>;
};

export type PriceServiceBatchGetPricesResponseCoinPrice = {
    coinId?: PriceServiceCoinId;
    price?: PriceServiceBatchGetPricesResponseCoinPricePrice;
    error?: string;
};

export type PriceServiceBatchGetPricesResponseCoinPricePrice = {
    results?: Array<PriceServiceGetPriceResponse>;
};

export type PriceServiceCheckLatestPriceResponse = {
    prices?: Array<PriceServiceCheckLatestPriceResponseCoinPrice>;
    latestPrice?: PriceServiceCheckLatestPriceResponseCoinPrice;
};

export type PriceServiceCheckLatestPriceResponseCoinPrice = {
    coinId?: PriceServiceCoinId;
    price?: number;
    timestamp?: string;
};

/**
 * The identifier of a coin.
 */
export type PriceServiceCoinId = {
    symbol?: string;
    address?: PriceServiceCoinIdAddressIdentifier;
};

/**
 * The coin can be defined as a symbol, e.g. BTC, ETH, etc, or an address + chain.
 * The format of the chain is consistent with the Sentio internal representation.
 */
export type PriceServiceCoinIdAddressIdentifier = {
    address?: string;
    chain?: string;
};

/**
 * GetPriceResponse is the response for GetPrice.
 */
export type PriceServiceGetPriceResponse = {
    /**
     * Price in USD.
     */
    price?: number;
    /**
     * The actual timestamp of the price returned.
     */
    timestamp?: string;
};

export type PriceServiceListCoinsResponse = {
    coins?: Array<PriceServiceCoinId>;
    coinAddressesInChain?: {
        [key: string]: PriceServiceCoinId;
    };
};

export type ProcessorServiceChainState = {
    /**
     * The chain id.
     */
    chainId?: string;
    /**
     * The most recently processed block number and block hash.
     */
    processedBlockNumber?: string;
    processedTimestampMicros?: string;
    processedBlockHash?: string;
    processedVersion?: number;
    status?: ProcessorServiceChainStateStatus;
    updatedAt?: string;
    /**
     * The serialized templates info.
     */
    templates?: string;
    /**
     * The serialized indexer state.
     */
    indexerState?: string;
    /**
     * The serialized meter state.
     */
    meterState?: string;
    handlerStat?: string;
    initialStartBlockNumber?: string;
    estimatedLatestBlockNumber?: string;
    /**
     * To be deprecated after the migration.
     */
    trackers?: string;
};

export type ProcessorServiceChainStateStatus = {
    state?: ProcessorServiceChainStateStatusState;
    errorRecord?: CommonErrorRecord;
};

export type ProcessorServiceChainStateStatusState = 'UNKNOWN' | 'ERROR' | 'CATCHING_UP' | 'PROCESSING_LATEST' | 'QUEUING';

export type ProcessorServiceDownloadProcessorResponse = {
    url?: string;
};

export type ProcessorServiceGetProcessorResponse = {
    processor?: ProcessorServiceProcessor;
};

export type ProcessorServiceGetProcessorStatusRequestV2VersionSelector = 'ACTIVE' | 'PENDING' | 'ALL';

export type ProcessorServiceGetProcessorStatusResponse = {
    processors?: Array<ProcessorServiceGetProcessorStatusResponseProcessorEx>;
};

export type ProcessorServiceGetProcessorStatusResponseProcessorEx = {
    states?: Array<ProcessorServiceChainState>;
    processorId?: string;
    codeHash?: string;
    commitSha?: string;
    uploadedBy?: CommonUserInfo;
    uploadedAt?: string;
    processorStatus?: ProcessorServiceGetProcessorStatusResponseProcessorStatus;
    version?: number;
    sdkVersion?: string;
    gitUrl?: string;
    versionState?: ProcessorServiceProcessorVersionState;
    versionLabel?: string;
    ipfsHash?: string;
    debugFork?: string;
    cliVersion?: string;
    referenceProjectId?: string;
    warnings?: Array<string>;
    pause?: boolean;
    networkOverrides?: Array<ProcessorServiceNetworkOverride>;
};

export type ProcessorServiceGetProcessorStatusResponseProcessorStatus = {
    state?: ProcessorServiceGetProcessorStatusResponseProcessorStatusState;
    errorRecord?: CommonErrorRecord;
};

export type ProcessorServiceGetProcessorStatusResponseProcessorStatusState = 'UNKNOWN' | 'ERROR' | 'STARTING' | 'PROCESSING';

export type ProcessorServiceGetProcessorWithProjectResponse = {
    processor?: ProcessorServiceProcessor;
    project?: CommonProject;
};

export type ProcessorServiceGetProcessorsResponse = {
    processors?: Array<ProcessorServiceProcessor>;
};

export type ProcessorServiceNetworkOverride = {
    chain?: string;
    host?: string;
};

/**
 * This represents a processor which backend works on.
 */
export type ProcessorServiceProcessor = {
    /**
     * The unique processor id.
     */
    processorId?: string;
    /**
     * The project this processor belongs to.
     */
    projectId?: string;
    /**
     * The version of the code_url below.
     */
    version?: number;
    sdkVersion?: string;
    /**
     * Call should be able to fetch the code to run from code_url.
     */
    codeUrl?: string;
    chainStates?: Array<ProcessorServiceChainState>;
    /**
     * If non empty, this is the contract associated with the processor.
     */
    contractId?: string;
    versionState?: ProcessorServiceProcessorVersionState;
    debug?: boolean;
    /**
     * The timescale-db sharding index of this processor.
     */
    timescaleShardingIndex?: number;
    versionLabel?: string;
    ipfsHash?: string;
    debugFork?: string;
    /**
     * The created timestamp of the processor.
     */
    createdAt?: string;
    /**
     * The clickhouse sharding index of this processor.
     */
    clickhouseShardingIndex?: number;
    k8sClusterId?: number;
    enableMaterializedView?: boolean;
    referenceProjectId?: string;
    networkOverrides?: Array<ProcessorServiceNetworkOverride>;
    eventlogMigrateStatus?: number;
    eventlogVersion?: number;
    pause?: boolean;
    entitySchemaVersion?: number;
};

export type ProcessorServiceProcessorVersionState = 'UNKNOWN' | 'PENDING' | 'ACTIVE' | 'OBSOLETE';

export type ProcessorServiceUpdateChainProcessorStatusResponse = {
    [key: string]: unknown;
};

export type SolidityServiceBaseChainConfig = {
    endpoint?: string;
    debugEndpoint?: string;
    sourceFetcherType?: SolidityServiceSourceFetcherType;
    sourceFetcherEndpoint?: string;
    sourceFetcherTimeout?: string;
    sourceFetcherApiKeys?: Array<string>;
    oklinkChainShortName?: string;
};

export type SolidityServiceBlockOverrides = {
    blockNumber?: string;
    timestamp?: string;
    gasLimit?: string;
    difficulty?: string;
    baseFee?: string;
    blockHash?: {
        [key: string]: string;
    };
};

export type SolidityServiceBlockPrice = {
    blockNumber?: number;
    estimatedTransactionCount?: number;
    baseFeePerGas?: number;
    blobBaseFeePerGas?: number;
    estimatedPrices?: Array<SolidityServiceEstimatedPrice>;
};

export type SolidityServiceChainIdentifier = {
    chainId?: string;
    forkId?: string;
};

export type SolidityServiceCompileSourceInternalResponse = {
    failure?: SolidityServiceFailure;
};

export type SolidityServiceCompilerOptions = {
    language?: string;
    version?: string;
    settings?: SolidityServiceSettings;
    specializations?: SolidityServiceSpecializations;
};

export type SolidityServiceContractKeyInfo = {
    preprocessKey?: string;
    compilationKey?: string;
};

export type SolidityServiceCreateForkResponse = {
    fork?: SolidityServiceFork;
};

export type SolidityServiceDecodeStateDiffResponse = {
    result?: string;
};

export type SolidityServiceEstimatedPrice = {
    confidence?: number;
    price?: number;
    maxPriorityFeePerGas?: number;
    maxFeePerGas?: number;
};

export type SolidityServiceEvmRawTransaction = {
    hash?: string;
    blockNumber?: string;
    isIn?: boolean;
    trace?: boolean;
    tx?: EvmTransaction;
    json?: string;
    timestamp?: string;
    transactionStatus?: number;
    methodSignature?: string;
    methodSignatureText?: string;
    abiItem?: string;
};

export type SolidityServiceEvmSearchTransactionsResponse = {
    transactions?: Array<SolidityServiceEvmRawTransaction>;
    nextPageToken?: string;
};

export type SolidityServiceExternalFork = {
    chainConfig?: SolidityServiceBaseChainConfig;
    nodeAdditionalHeaders?: string;
};

export type SolidityServiceFailure = {
    error?: string;
    reason?: string;
};

export type SolidityServiceFetchAndCompileInternalResponse = {
    compiledAddresses?: Array<string>;
    failures?: {
        [key: string]: SolidityServiceFailure;
    };
};

export type SolidityServiceFork = {
    id?: string;
    type?: SolidityServiceForkType;
    name?: string;
    extra?: string;
    managedFork?: SolidityServiceManagedFork;
    externalFork?: SolidityServiceExternalFork;
    createTime?: string;
    updateTime?: string;
};

export type SolidityServiceForkServiceCreateForkBody = {
    fork: SolidityServiceFork;
};

export type SolidityServiceForkServiceUpdateForkBody = {
    fork: SolidityServiceFork;
};

export type SolidityServiceForkType = 'MANAGED' | 'EXTERNAL';

export type SolidityServiceGetEstimatedGasPriceResponse = {
    system?: string;
    network?: string;
    unit?: string;
    maxPrice?: number;
    currentBlockNumber?: number;
    msSinceLastBlock?: number;
    blockPrices?: Array<SolidityServiceBlockPrice>;
};

export type SolidityServiceGetForkInfoResponse = {
    currentBlockNumber?: string;
    currentBlockTimestamp?: string;
    currentBlockHash?: string;
    hardFork?: string;
    transactionOrder?: string;
    environment?: SolidityServiceNodeEnvironment;
    forkConfig?: SolidityServiceNodeForkConfig;
};

export type SolidityServiceGetForkResponse = {
    fork?: SolidityServiceFork;
};

export type SolidityServiceGetSimulationBundleResponse = {
    simulations?: Array<SolidityServiceSimulation>;
    error?: string;
};

export type SolidityServiceGetSimulationResponse = {
    simulation?: SolidityServiceSimulation;
};

export type SolidityServiceGetSimulationsResponse = {
    simulations?: Array<SolidityServiceSimulation>;
    count?: string;
    page?: number;
    pageSize?: number;
};

export type SolidityServiceGetStorageSummaryInternalResponse = {
    results?: Array<SolidityServiceStorageSummaryResult>;
};

export type SolidityServiceGetTraceCallInternalRequestBundle = {
    transactions?: Array<{
        [key: string]: unknown;
    }>;
    blockOverride?: SolidityServiceBlockOverrides;
};

export type SolidityServiceGetTraceCallInternalRequestStateContext = {
    blockNumber?: string;
    transactionIndex?: number;
};

export type SolidityServiceGetTraceCallInternalResponse = {
    result?: Array<Array<{
        [key: string]: unknown;
    }>>;
    outputs?: Array<Array<{
        [key: string]: unknown;
    }>>;
    error?: string;
};

export type SolidityServiceGetTraceTransactionInternalResponse = {
    result?: string;
};

export type SolidityServiceListForksResponse = {
    forks?: Array<SolidityServiceFork>;
};

export type SolidityServiceManagedFork = {
    parentChainSpec?: SolidityServiceChainIdentifier;
    parentRpcEndpoint?: string;
    parentBlockNumber?: string;
    chainId?: string;
    rpcEndpoint?: string;
    version?: string;
};

export type SolidityServiceMetadata = {
    useLiteralContent?: boolean;
    bytecodeHash?: string;
    appendCBOR?: boolean;
};

export type SolidityServiceNodeEnvironment = {
    chainId?: string;
    baseFee?: string;
    gasLimit?: string;
    gasPrice?: string;
};

export type SolidityServiceNodeForkConfig = {
    forkUrl?: string;
    forkBlockNumber?: string;
    forkRetryBackoff?: string;
};

export type SolidityServiceOptimizer = {
    enabled?: boolean;
    runs?: number;
    details?: SolidityServiceOptimizerDetails;
};

export type SolidityServiceOptimizerDetails = {
    peephole?: boolean;
    jumpdestRemover?: boolean;
    yul?: boolean;
    yulDetails?: SolidityServiceOptimizerDetailsYulDetails;
};

export type SolidityServiceOptimizerDetailsYulDetails = {
    stackAllocation?: boolean;
    optimizerSteps?: string;
};

export type SolidityServicePreProcessCompilationInternalResponse = {
    preprocessedAddresses?: Array<string>;
};

export type SolidityServiceSettings = {
    remappings?: Array<string>;
    optimizer?: SolidityServiceOptimizer;
    evmVersion?: string;
    metadata?: SolidityServiceMetadata;
    viaIR?: boolean;
    compilationTarget?: {
        [key: string]: string;
    };
};

export type SolidityServiceSimulateTransactionBundleResponse = {
    bundleId?: string;
    simulations?: Array<SolidityServiceSimulation>;
    error?: string;
};

export type SolidityServiceSimulateTransactionResponse = {
    simulation?: SolidityServiceSimulation;
};

export type SolidityServiceSimulation = {
    id?: string;
    createAt?: string;
    bundleId?: string;
    networkId: string;
    chainId?: string;
    chainSpec: SolidityServiceChainIdentifier;
    to: string;
    input: string;
    /**
     * Can be "latest".
     */
    blockNumber: string;
    transactionIndex: string;
    from: string;
    gas: string;
    gasPrice: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    value: string;
    accessList?: Array<EvmAccessListItem>;
    originTxHash?: string;
    label?: string;
    stateOverrides?: {
        [key: string]: SolidityServiceStateOverride;
    };
    sourceOverrides?: {
        [key: string]: string;
    };
    blockOverride?: SolidityServiceBlockOverrides;
    debugDeployment?: boolean;
    result?: SolidityServiceSimulationResult;
    sharing?: SolidityServiceSimulationSharing;
};

export type SolidityServiceSimulationResult = {
    transaction?: EvmTransaction;
    transactionReceipt?: EvmTransactionReceipt;
};

export type SolidityServiceSimulationSharing = {
    isPublic?: boolean;
    id?: string;
    simulationId?: string;
};

export type SolidityServiceSolidityApiServiceSimulateTransactionBody = {
    simulation: SolidityServiceSimulation;
};

export type SolidityServiceSolidityApiServiceSimulateTransactionBundleBody = {
    /**
     * For blockNumber, transactionIndex, networkId, stateOverrides and blockOverrides fields, only the first simulation takes effect.
     */
    simulations: Array<SolidityServiceSimulation>;
};

export type SolidityServiceSolidityApiServiceSimulateTransactionBundleOnForkBody = {
    /**
     * For blockNumber, transactionIndex, networkId, stateOverrides and blockOverrides fields, only the first simulation takes effect.
     */
    simulations: Array<SolidityServiceSimulation>;
};

export type SolidityServiceSolidityApiServiceSimulateTransactionOnForkBody = {
    simulation: SolidityServiceSimulation;
};

export type SolidityServiceSourceFetcherType = 'ETHERSCAN' | 'BLOCKSCOUT' | 'OKLINK';

export type SolidityServiceSourceInfo = {
    contractName?: string;
    options?: SolidityServiceCompilerOptions;
};

export type SolidityServiceSourceMultiFile = {
    source?: {
        [key: string]: string;
    };
    compilerSettings?: string;
};

export type SolidityServiceSourceSpec = {
    id?: string;
    multiFile?: SolidityServiceSourceMultiFile;
    standardJson?: {
        [key: string]: unknown;
    };
    metadata?: {
        [key: string]: unknown;
    };
    solidityVersion?: string;
    contractName?: string;
    constructorArgs?: string;
};

export type SolidityServiceSpecializations = {
    constructorArguments?: string;
};

export type SolidityServiceStateOverride = {
    state?: {
        [key: string]: string;
    };
    /**
     * uint256
     */
    balance?: string;
    code?: string;
};

export type SolidityServiceStorageSummaryResult = {
    address?: string;
    codeAddress?: string;
    stateVariables?: Array<{
        [key: string]: unknown;
    }>;
};

export type SolidityServiceUpdateForkResponse = {
    fork?: SolidityServiceFork;
};

export type WebServiceChart = {
    type?: WebServiceChartChartType;
    queries?: Array<CommonQuery>;
    formulas?: Array<CommonFormula>;
    config?: WebServiceChartConfig;
    note?: WebServiceNote;
    datasourceType?: WebServiceChartDataSourceType;
    segmentationQueries?: Array<CommonSegmentationQuery>;
    insightsQueries?: Array<InsightsServiceQueryRequestQuery>;
    eventLogsConfig?: WebServiceEventLogsConfig;
    retentionQuery?: CommonRetentionQuery;
    sqlQuery?: string;
    sqlQueryId?: string;
};

export type WebServiceChartChartType = 'LINE' | 'AREA' | 'BAR' | 'BAR_GAUGE' | 'TABLE' | 'QUERY_VALUE' | 'PIE' | 'NOTE' | 'SCATTER';

export type WebServiceChartDataSourceType = 'METRICS' | 'NOTES' | 'ANALYTICS' | 'INSIGHTS' | 'EVENTS' | 'RETENTION' | 'SQL';

export type WebServiceChartConfig = {
    yAxis?: WebServiceChartConfigYAxisConfig;
    barGauge?: WebServiceChartConfigBarGaugeConfig;
    valueConfig?: WebServiceChartConfigValueConfig;
    timeRangeOverride?: WebServiceChartConfigTimeRangeOverride;
    tableConfig?: WebServiceChartConfigTableConfig;
    queryValueConfig?: WebServiceChartConfigQueryValueConfig;
    pieConfig?: WebServiceChartConfigPieConfig;
    markers?: Array<WebServiceChartConfigMarker>;
    lineConfig?: WebServiceChartConfigLineConfig;
    xAxis?: WebServiceChartConfigXAxisConfig;
    labelConfig?: WebServiceChartConfigLabelConfig;
    scatterConfig?: WebServiceChartConfigScatterConfig;
};

export type WebServiceChartConfigBarGaugeConfig = {
    direction?: WebServiceChartConfigDirection;
    calculation?: WebServiceChartConfigCalculation;
    sort?: WebServiceChartConfigSort;
};

export type WebServiceChartConfigCalculation = 'LAST' | 'FIRST' | 'MEAN' | 'TOTAL' | 'ALL' | 'MIN' | 'MAX';

export type WebServiceChartConfigColorTheme = {
    textColor?: string;
    backgroundColor?: string;
    themeType?: string;
};

export type WebServiceChartConfigColumnSort = {
    column?: string;
    orderDesc?: boolean;
};

export type WebServiceChartConfigCompareTime = {
    ago?: CommonDuration;
};

export type WebServiceChartConfigDirection = 'HORIZONTAL' | 'VERTICAL';

export type WebServiceChartConfigLabelConfig = {
    columns?: Array<WebServiceChartConfigLabelConfigColumn>;
};

export type WebServiceChartConfigLabelConfigColumn = {
    name?: string;
    showLabel?: boolean;
    showValue?: boolean;
};

export type WebServiceChartConfigLineConfig = {
    style?: WebServiceChartConfigLineConfigStyle;
};

export type WebServiceChartConfigLineConfigStyle = 'Solid' | 'Dotted';

export type WebServiceChartConfigMappingRule = {
    comparison?: string;
    value?: number;
    text?: string;
    colorTheme?: WebServiceChartConfigColorTheme;
};

export type WebServiceChartConfigMarker = {
    type?: WebServiceChartConfigMarkerType;
    value?: number;
    color?: string;
    label?: string;
    valueX?: string;
};

export type WebServiceChartConfigMarkerType = 'LINE' | 'AREA' | 'LINEX';

export type WebServiceChartConfigPieConfig = {
    pieType?: WebServiceChartConfigPieConfigPieType;
    showPercent?: boolean;
    showValue?: boolean;
    calculation?: WebServiceChartConfigCalculation;
};

export type WebServiceChartConfigPieConfigPieType = 'Pie' | 'Donut';

export type WebServiceChartConfigQueryValueConfig = {
    colorTheme?: WebServiceChartConfigColorTheme;
    showBackgroundChart?: boolean;
    calculation?: WebServiceChartConfigCalculation;
    seriesCalculation?: WebServiceChartConfigCalculation;
};

export type WebServiceChartConfigScatterConfig = {
    symbolSize?: string;
};

export type WebServiceChartConfigSort = {
    sortBy?: WebServiceChartConfigSortBy;
    orderDesc?: boolean;
};

export type WebServiceChartConfigSortBy = 'ByName' | 'ByValue';

export type WebServiceChartConfigTableConfig = {
    calculation?: WebServiceChartConfigCalculation;
    showColumns?: {
        [key: string]: boolean;
    };
    sortColumns?: Array<WebServiceChartConfigColumnSort>;
    columnOrders?: Array<string>;
    columnWidths?: {
        [key: string]: number;
    };
    showPlainData?: boolean;
    calculations?: {
        [key: string]: WebServiceChartConfigCalculation;
    };
    valueConfigs?: {
        [key: string]: WebServiceChartConfigValueConfig;
    };
    rowLimit?: number;
};

export type WebServiceChartConfigTimeRangeOverride = {
    enabled?: boolean;
    timeRange?: CommonTimeRange;
    compareTime?: WebServiceChartConfigCompareTime;
};

export type WebServiceChartConfigValueConfig = {
    valueFormatter?: WebServiceChartConfigValueFormatter;
    showValueLabel?: boolean;
    maxSignificantDigits?: number;
    dateFormat?: string;
    mappingRules?: Array<WebServiceChartConfigMappingRule>;
    style?: WebServiceChartConfigValueConfigStyle;
    maxFractionDigits?: number;
    precision?: number;
    currencySymbol?: string;
};

export type WebServiceChartConfigValueConfigStyle = 'Standard' | 'Compact' | 'Scientific' | 'Percent' | 'Currency' | 'None';

export type WebServiceChartConfigValueFormatter = 'NumberFormatter' | 'DateFormatter' | 'StringFormatter';

export type WebServiceChartConfigXAxisConfig = {
    type?: string;
    min?: string;
    max?: string;
    scale?: boolean;
    name?: string;
    column?: string;
    sort?: WebServiceChartConfigSort;
    format?: string;
};

export type WebServiceChartConfigYAxisConfig = {
    min?: string;
    max?: string;
    scale?: boolean;
    stacked?: string;
    column?: string;
    name?: string;
};

export type WebServiceDashboard = {
    id?: string;
    name?: string;
    projectId?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    panels?: {
        [key: string]: WebServicePanel;
    };
    layouts?: WebServiceDashboardResponsiveLayouts;
    extra?: WebServiceDashboardExtra;
    sharing?: WebServiceDashboardSharing;
    default?: boolean;
    visibility?: WebServiceDashboardDashboardVisibility;
    ownerId?: string;
    tags?: Array<string>;
    url?: string;
    projectOwner?: string;
    projectSlug?: string;
};

export type WebServiceDashboardDashboardVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC';

export type WebServiceDashboardExtra = {
    templateVariables?: {
        [key: string]: WebServiceDashboardExtraTemplateVariable;
    };
    templateViews?: Array<WebServiceDashboardExtraTemplateView>;
};

export type WebServiceDashboardExtraTemplateVariable = {
    field?: string;
    defaultValue?: string;
    sourceName?: string;
    options?: Array<string>;
};

export type WebServiceDashboardExtraTemplateView = {
    values?: {
        [key: string]: string;
    };
};

export type WebServiceDashboardLayouts = {
    layouts?: Array<WebServiceDashboardLayoutsLayout>;
};

export type WebServiceDashboardLayoutsLayout = {
    i?: string;
    x?: number;
    y?: number;
    w?: number;
    h?: number;
};

export type WebServiceDashboardResponsiveLayouts = {
    responsiveLayouts?: {
        [key: string]: WebServiceDashboardLayouts;
    };
};

export type WebServiceDashboardSharing = {
    id?: string;
    dashboardId?: string;
    isPublic?: boolean;
    viewers?: Array<string>;
};

export type WebServiceEventLogsConfig = {
    columnsConfig?: CommonEventLogConfig;
    timeRangeOverride?: WebServiceEventLogsConfigTimeRangeOverride;
    query?: string;
    sourceName?: string;
};

export type WebServiceEventLogsConfigTimeRangeOverride = {
    enabled?: boolean;
    timeRange?: CommonTimeRange;
};

export type WebServiceExportDashboardResponse = {
    dashboardJson?: {
        [key: string]: unknown;
    };
};

export type WebServiceGetDashboardResponse = {
    dashboards?: Array<WebServiceDashboard>;
    permissions?: Array<CommonPermission>;
};

export type WebServiceGetProjectListResponse = {
    projects?: Array<CommonProject>;
    sharedProjects?: Array<CommonProject>;
    orgProjects?: Array<CommonProject>;
};

export type WebServiceGetProjectResponse = {
    project?: CommonProject;
    permissions?: Array<CommonPermission>;
};

export type WebServiceImportDashboardRequest = {
    /**
     * The id of the target dashboard to import into.
     */
    dashboardId: string;
    /**
     * The json data of a previously exported dashboard.
     */
    dashboardJson: {
        [key: string]: unknown;
    };
    /**
     * Override the layout of target dashboard.
     */
    overrideLayouts?: boolean;
};

export type WebServiceImportDashboardResponse = {
    dashboard?: WebServiceDashboard;
};

export type WebServiceNote = {
    content?: string;
    fontSize?: WebServiceNoteFontSize;
    textAlign?: WebServiceNoteAlignment;
    verticalAlign?: WebServiceNoteVerticalAlignment;
    backgroundColor?: string;
    textColor?: string;
};

export type WebServiceNoteAlignment = 'LEFT' | 'CENTER' | 'RIGHT';

export type WebServiceNoteFontSize = 'MD' | 'SM' | 'LG' | 'XL' | 'XXL';

export type WebServiceNoteVerticalAlignment = 'TOP' | 'MIDDLE' | 'BOTTOM';

export type WebServicePanel = {
    id?: string;
    name?: string;
    dashboardId?: string;
    chart?: WebServiceChart;
};

export type SaveAlertRuleData = {
    body: AlertServiceSaveAlertRuleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/alerts/rule';
};

export type SaveAlertRuleResponses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type SaveAlertRuleResponse = SaveAlertRuleResponses[keyof SaveAlertRuleResponses];

export type GetAlertRulesData = {
    body?: never;
    path: {
        projectId: string;
    };
    query?: never;
    url: '/api/v1/alerts/rule/project/{projectId}';
};

export type GetAlertRulesResponses = {
    /**
     * A successful response.
     */
    200: AlertServiceGetAlertRulesResponse;
};

export type GetAlertRulesResponse = GetAlertRulesResponses[keyof GetAlertRulesResponses];

export type DeleteAlertRuleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/alerts/rule/{id}';
};

export type DeleteAlertRuleResponses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteAlertRuleResponse = DeleteAlertRuleResponses[keyof DeleteAlertRuleResponses];

export type SaveAlertRule2Data = {
    body: AlertServiceAlertServiceSaveAlertRuleBody;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/alerts/rule/{id}';
};

export type SaveAlertRule2Responses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type SaveAlertRule2Response = SaveAlertRule2Responses[keyof SaveAlertRule2Responses];

export type GetAlertData = {
    body?: never;
    path: {
        ruleId: string;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
    url: '/api/v1/alerts/{ruleId}';
};

export type GetAlertResponses = {
    /**
     * A successful response.
     */
    200: AlertServiceGetAlertResponse;
};

export type GetAlertResponse = GetAlertResponses[keyof GetAlertResponses];

export type CancelSqlQueryData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        executionId: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
        /**
         * version of the datasource, default to the active version if not provided
         */
        version?: number;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/cancel_query/{executionId}';
};

export type CancelSqlQueryResponses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type CancelSqlQueryResponse = CancelSqlQueryResponses[keyof CancelSqlQueryResponses];

export type ExecuteSqlData = {
    body: AnalyticServiceAnalyticServiceExecuteSqlBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/analytics/{owner}/{slug}/sql/execute';
};

export type ExecuteSqlResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceSyncExecuteSqlResponse;
};

export type ExecuteSqlResponse = ExecuteSqlResponses[keyof ExecuteSqlResponses];

export type ExecuteSqlAsyncData = {
    body: AnalyticServiceAnalyticServiceExecuteSqlAsyncBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/analytics/{owner}/{slug}/sql/execute/async';
};

export type ExecuteSqlAsyncResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceAsyncExecuteSqlResponse;
};

export type ExecuteSqlAsyncResponse = ExecuteSqlAsyncResponses[keyof ExecuteSqlAsyncResponses];

export type QuerySqlExecutionDetailData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        executionId: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
        /**
         * version of the datasource, default to the active version if not provided
         */
        version?: number;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/query_execution_detail/{executionId}';
};

export type QuerySqlExecutionDetailResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceQuerySqlExecutionDetailResponse;
};

export type QuerySqlExecutionDetailResponse = QuerySqlExecutionDetailResponses[keyof QuerySqlExecutionDetailResponses];

export type QuerySqlResultData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        executionId: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
        /**
         * version of the datasource, default to the active version if not provided
         */
        version?: number;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/query_result/{executionId}';
};

export type QuerySqlResultResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceQuerySqlResultResponse;
};

export type QuerySqlResultResponse = QuerySqlResultResponses[keyof QuerySqlResultResponses];

export type SaveRefreshableMaterializedViewData = {
    body: AnalyticServiceAnalyticServiceSaveRefreshableMaterializedViewBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view';
};

export type SaveRefreshableMaterializedViewResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceSaveRefreshableMaterializedViewResponse;
};

export type SaveRefreshableMaterializedViewResponse = SaveRefreshableMaterializedViewResponses[keyof SaveRefreshableMaterializedViewResponses];

export type DeleteRefreshableMaterializedViewData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        name: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view/{name}';
};

export type DeleteRefreshableMaterializedViewResponses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteRefreshableMaterializedViewResponse = DeleteRefreshableMaterializedViewResponses[keyof DeleteRefreshableMaterializedViewResponses];

export type GetRefreshableMaterializedStatusData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        name: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view/{name}';
};

export type GetRefreshableMaterializedStatusResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceGetRefreshableMaterializedViewStatusResponse;
};

export type GetRefreshableMaterializedStatusResponse = GetRefreshableMaterializedStatusResponses[keyof GetRefreshableMaterializedStatusResponses];

export type ListRefreshableMaterializedViewsData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: {
        /**
         * use project id if project_owner and project_slug are not provided
         */
        projectId?: string;
    };
    url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_views';
};

export type ListRefreshableMaterializedViewsResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceListRefreshableMaterializedViewResponse;
};

export type ListRefreshableMaterializedViewsResponse = ListRefreshableMaterializedViewsResponses[keyof ListRefreshableMaterializedViewsResponses];

export type SaveSqlData = {
    body: AnalyticServiceAnalyticServiceSaveSqlBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/analytics/{owner}/{slug}/sql/save';
};

export type SaveSqlResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceSaveSqlResponse;
};

export type SaveSqlResponse = SaveSqlResponses[keyof SaveSqlResponses];

export type SaveSql2Data = {
    body: AnalyticServiceAnalyticServiceSaveSqlBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/analytics/{owner}/{slug}/sql/save';
};

export type SaveSql2Responses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceSaveSqlResponse;
};

export type SaveSql2Response = SaveSql2Responses[keyof SaveSql2Responses];

export type ListDashboardsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter the dashboard by id
         */
        dashboardId?: string;
        /**
         * filter the dashboard by project id
         */
        projectId?: string;
        /**
         * username or organization name
         */
        ownerName?: string;
        /**
         * project slug
         */
        slug?: string;
    };
    url: '/api/v1/dashboards';
};

export type ListDashboardsResponses = {
    /**
     * A successful response.
     */
    200: WebServiceGetDashboardResponse;
};

export type ListDashboardsResponse = ListDashboardsResponses[keyof ListDashboardsResponses];

export type ImportDashboardData = {
    body: WebServiceImportDashboardRequest;
    path?: never;
    query?: never;
    url: '/api/v1/dashboards/json';
};

export type ImportDashboardResponses = {
    /**
     * A successful response.
     */
    200: WebServiceImportDashboardResponse;
};

export type ImportDashboardResponse = ImportDashboardResponses[keyof ImportDashboardResponses];

export type DeleteDashboardData = {
    body?: never;
    path: {
        /**
         * filter the dashboard by id
         */
        dashboardId: string;
    };
    query?: {
        /**
         * filter the dashboard by project id
         */
        projectId?: string;
        /**
         * username or organization name
         */
        ownerName?: string;
        /**
         * project slug
         */
        slug?: string;
    };
    url: '/api/v1/dashboards/{dashboardId}';
};

export type DeleteDashboardResponses = {
    /**
     * A successful response.
     */
    200: WebServiceDashboard;
};

export type DeleteDashboardResponse = DeleteDashboardResponses[keyof DeleteDashboardResponses];

export type GetDashboardData = {
    body?: never;
    path: {
        /**
         * filter the dashboard by id
         */
        dashboardId: string;
    };
    query?: {
        /**
         * filter the dashboard by project id
         */
        projectId?: string;
        /**
         * username or organization name
         */
        ownerName?: string;
        /**
         * project slug
         */
        slug?: string;
    };
    url: '/api/v1/dashboards/{dashboardId}';
};

export type GetDashboardResponses = {
    /**
     * A successful response.
     */
    200: WebServiceGetDashboardResponse;
};

export type GetDashboardResponse = GetDashboardResponses[keyof GetDashboardResponses];

export type ExportDashboardData = {
    body?: never;
    path: {
        dashboardId: string;
    };
    query?: never;
    url: '/api/v1/dashboards/{dashboardId}/json';
};

export type ExportDashboardResponses = {
    /**
     * A successful response.
     */
    200: WebServiceExportDashboardResponse;
};

export type ExportDashboardResponse = ExportDashboardResponses[keyof ExportDashboardResponses];

export type QueryLogData = {
    body: AnalyticServiceSearchServiceQueryLogBody;
    path: {
        owner: string;
        slug: string;
    };
    query?: never;
    url: '/api/v1/eventlogs/{owner}/{slug}';
};

export type QueryLogResponses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceLogQueryResponse;
};

export type QueryLogResponse = QueryLogResponses[keyof QueryLogResponses];

export type QueryLog2Data = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: {
        projectId?: string;
        query?: string;
        'timeRange.start.relativeTime.unit'?: string;
        'timeRange.start.relativeTime.value'?: number;
        'timeRange.start.relativeTime.align'?: string;
        'timeRange.start.absoluteTime'?: string;
        'timeRange.end.relativeTime.unit'?: string;
        'timeRange.end.relativeTime.value'?: number;
        'timeRange.end.relativeTime.align'?: string;
        'timeRange.end.absoluteTime'?: string;
        'timeRange.step'?: string;
        'timeRange.interval.value'?: number;
        'timeRange.interval.unit'?: string;
        'timeRange.timezone'?: string;
        limit?: number;
        offset?: number;
        version?: number;
    };
    url: '/api/v1/eventlogs/{owner}/{slug}/query';
};

export type QueryLog2Responses = {
    /**
     * A successful response.
     */
    200: AnalyticServiceLogQueryResponse;
};

export type QueryLog2Response = QueryLog2Responses[keyof QueryLog2Responses];

export type ListCoins2Data = {
    body?: never;
    path?: never;
    query?: {
        projectOwner?: string;
        projectSlug?: string;
        projectId?: string;
        version?: number;
        limit?: number;
        offset?: number;
        searchQuery?: string;
    };
    url: '/api/v1/insights/coins';
};

export type ListCoins2Responses = {
    /**
     * A successful response.
     */
    200: InsightsServiceListCoinsResponse;
};

export type ListCoins2Response = ListCoins2Responses[keyof ListCoins2Responses];

export type ListCoinsData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: {
        projectId?: string;
        version?: number;
        limit?: number;
        offset?: number;
        searchQuery?: string;
    };
    url: '/api/v1/insights/{owner}/{slug}/coins';
};

export type ListCoinsResponses = {
    /**
     * A successful response.
     */
    200: InsightsServiceListCoinsResponse;
};

export type ListCoinsResponse = ListCoinsResponses[keyof ListCoinsResponses];

export type QueryData = {
    body: InsightsServiceInsightsServiceQueryBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/insights/{owner}/{slug}/query';
};

export type QueryResponses = {
    /**
     * A successful response.
     */
    200: InsightsServiceQueryResponse;
};

export type QueryResponse = QueryResponses[keyof QueryResponses];

export type GetMetricsData = {
    body?: never;
    path?: never;
    query?: {
        projectId?: string;
        name?: string;
        version?: number;
    };
    url: '/api/v1/metrics';
};

export type GetMetricsResponses = {
    /**
     * A successful response.
     */
    200: MetricsServiceGetMetricsResponse;
};

export type GetMetricsResponse = GetMetricsResponses[keyof GetMetricsResponses];

export type QueryInstantData = {
    body: MetricsServiceObservabilityServiceQueryBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/metrics/{owner}/{slug}/query';
};

export type QueryInstantResponses = {
    /**
     * A successful response.
     */
    200: MetricsServiceQueryValueResponse;
};

export type QueryInstantResponse = QueryInstantResponses[keyof QueryInstantResponses];

export type QueryRangeData = {
    body: MetricsServiceObservabilityServiceQueryRangeBody;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/metrics/{owner}/{slug}/query_range';
};

export type QueryRangeResponses = {
    /**
     * A successful response.
     */
    200: MetricsServiceMetricsQueryResponse;
};

export type QueryRangeResponse = QueryRangeResponses[keyof QueryRangeResponses];

export type GetPriceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The timestamp we request the price at. Note, the price service may not have
         * the price at the exact timestamp, in which case it will return the price
         * at the closest timestamp.
         */
        timestamp?: string;
        'coinId.symbol'?: string;
        'coinId.address.address'?: string;
        'coinId.address.chain'?: string;
        source?: string;
    };
    url: '/api/v1/prices';
};

export type GetPriceResponses = {
    /**
     * A successful response.
     */
    200: PriceServiceGetPriceResponse;
};

export type GetPriceResponse = GetPriceResponses[keyof GetPriceResponses];

export type AddCoinByGeckoData = {
    body: PriceServiceAddCoinByGeckoRequest;
    path?: never;
    query?: never;
    url: '/api/v1/prices/add_coin_by_gecko';
};

export type AddCoinByGeckoResponses = {
    /**
     * A successful response.
     */
    200: PriceServiceAddCoinByGeckoResponse;
};

export type AddCoinByGeckoResponse = AddCoinByGeckoResponses[keyof AddCoinByGeckoResponses];

export type BatchGetPricesData = {
    body: PriceServiceBatchGetPricesRequest;
    path?: never;
    query?: never;
    url: '/api/v1/prices/batch';
};

export type BatchGetPricesResponses = {
    /**
     * A successful response.
     */
    200: PriceServiceBatchGetPricesResponse;
};

export type BatchGetPricesResponse = BatchGetPricesResponses[keyof BatchGetPricesResponses];

export type CheckLatestPriceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/prices/check_latest';
};

export type CheckLatestPriceResponses = {
    /**
     * A successful response.
     */
    200: PriceServiceCheckLatestPriceResponse;
};

export type CheckLatestPriceResponse = CheckLatestPriceResponses[keyof CheckLatestPriceResponses];

export type PriceListCoinsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        searchQuery?: string;
        chain?: string;
    };
    url: '/api/v1/prices/coins';
};

export type PriceListCoinsResponses = {
    /**
     * A successful response.
     */
    200: PriceServiceListCoinsResponse;
};

export type PriceListCoinsResponse = PriceListCoinsResponses[keyof PriceListCoinsResponses];

export type GetProcessorStatusV2Data = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: {
        /**
         *  - ACTIVE: Only active version
         * - PENDING: Only pending versions
         * - ALL: All version
         */
        version?: 'ACTIVE' | 'PENDING' | 'ALL';
    };
    url: '/api/v1/processors/{owner}/{slug}/status';
};

export type GetProcessorStatusV2Responses = {
    /**
     * A successful response.
     */
    200: ProcessorServiceGetProcessorStatusResponse;
};

export type GetProcessorStatusV2Response = GetProcessorStatusV2Responses[keyof GetProcessorStatusV2Responses];

export type GetProjectData = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/project/{owner}/{slug}';
};

export type GetProjectResponses = {
    /**
     * A successful response.
     */
    200: WebServiceGetProjectResponse;
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type GetProjectByIdData = {
    body?: never;
    path: {
        projectId: string;
    };
    query?: never;
    url: '/api/v1/project/{projectId}';
};

export type GetProjectByIdResponses = {
    /**
     * A successful response.
     */
    200: CommonProjectInfo;
};

export type GetProjectByIdResponse = GetProjectByIdResponses[keyof GetProjectByIdResponses];

export type GetProjectListData = {
    body?: never;
    path?: never;
    query?: {
        userId?: string;
        organizationId?: string;
    };
    url: '/api/v1/projects';
};

export type GetProjectListResponses = {
    /**
     * A successful response.
     */
    200: WebServiceGetProjectListResponse;
};

export type GetProjectListResponse = GetProjectListResponses[keyof GetProjectListResponses];

export type ListDashboards2Data = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
    };
    query?: {
        /**
         * filter the dashboard by id
         */
        dashboardId?: string;
        /**
         * filter the dashboard by project id
         */
        projectId?: string;
    };
    url: '/api/v1/projects/{owner}/{slug}/dashboards';
};

export type ListDashboards2Responses = {
    /**
     * A successful response.
     */
    200: WebServiceGetDashboardResponse;
};

export type ListDashboards2Response = ListDashboards2Responses[keyof ListDashboards2Responses];

export type GetDashboard2Data = {
    body?: never;
    path: {
        /**
         * username or organization name
         */
        owner: string;
        /**
         * project slug
         */
        slug: string;
        /**
         * filter the dashboard by id
         */
        dashboardId: string;
    };
    query?: {
        /**
         * filter the dashboard by project id
         */
        projectId?: string;
    };
    url: '/api/v1/projects/{owner}/{slug}/dashboards/{dashboardId}';
};

export type GetDashboard2Responses = {
    /**
     * A successful response.
     */
    200: WebServiceGetDashboardResponse;
};

export type GetDashboard2Response = GetDashboard2Responses[keyof GetDashboard2Responses];

export type GetEstimatedGasPriceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Current support chain id: 1
         */
        chainId?: string;
    };
    url: '/api/v1/solidity/estimated_gas_price';
};

export type GetEstimatedGasPriceResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetEstimatedGasPriceResponse;
};

export type GetEstimatedGasPriceResponse = GetEstimatedGasPriceResponses[keyof GetEstimatedGasPriceResponses];

export type ListForksData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork';
};

export type ListForksResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceListForksResponse;
};

export type ListForksResponse = ListForksResponses[keyof ListForksResponses];

export type CreateForkData = {
    body: SolidityServiceForkServiceCreateForkBody;
    path: {
        owner: string;
        slug: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork';
};

export type CreateForkResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceCreateForkResponse;
};

export type CreateForkResponse = CreateForkResponses[keyof CreateForkResponses];

export type GetCallTraceOnForkBundleData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        forkId: string;
        bundleId: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/bundle/{bundleId}/call_trace';
};

export type GetCallTraceOnForkBundleResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceOnForkBundleResponse = GetCallTraceOnForkBundleResponses[keyof GetCallTraceOnForkBundleResponses];

export type SimulateTransactionOnForkData = {
    body: SolidityServiceSolidityApiServiceSimulateTransactionOnForkBody;
    path: {
        owner: string;
        slug: string;
        forkId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation';
};

export type SimulateTransactionOnForkResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceSimulateTransactionResponse;
};

export type SimulateTransactionOnForkResponse = SimulateTransactionOnForkResponses[keyof SimulateTransactionOnForkResponses];

export type GetCallTraceOnForkSimulationData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        forkId: string;
        simulationId: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation/{simulationId}/call_trace';
};

export type GetCallTraceOnForkSimulationResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceOnForkSimulationResponse = GetCallTraceOnForkSimulationResponses[keyof GetCallTraceOnForkSimulationResponses];

export type SimulateTransactionBundleOnForkData = {
    body: SolidityServiceSolidityApiServiceSimulateTransactionBundleOnForkBody;
    path: {
        owner: string;
        slug: string;
        forkId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation_bundle';
};

export type SimulateTransactionBundleOnForkResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceSimulateTransactionBundleResponse;
};

export type SimulateTransactionBundleOnForkResponse = SimulateTransactionBundleOnForkResponses[keyof SimulateTransactionBundleOnForkResponses];

export type GetCallTraceOnForkTransactionData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        forkId: string;
        txHash: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/transaction/{txHash}/call_trace';
};

export type GetCallTraceOnForkTransactionResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceOnForkTransactionResponse = GetCallTraceOnForkTransactionResponses[keyof GetCallTraceOnForkTransactionResponses];

export type DeleteForkData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        id: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{id}';
};

export type DeleteForkResponses = {
    /**
     * A successful response.
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteForkResponse = DeleteForkResponses[keyof DeleteForkResponses];

export type GetForkData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        id: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{id}';
};

export type GetForkResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetForkResponse;
};

export type GetForkResponse = GetForkResponses[keyof GetForkResponses];

export type UpdateForkData = {
    body: SolidityServiceForkServiceUpdateForkBody;
    path: {
        owner: string;
        slug: string;
        id: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{id}';
};

export type UpdateForkResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceUpdateForkResponse;
};

export type UpdateForkResponse = UpdateForkResponses[keyof UpdateForkResponses];

export type GetForkInfoData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        id: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/fork/{id}/info';
};

export type GetForkInfoResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetForkInfoResponse;
};

export type GetForkInfoResponse = GetForkInfoResponses[keyof GetForkInfoResponses];

export type SearchTransactionsData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: {
        chainId?: Array<string>;
        address?: Array<string>;
        includeDirect?: boolean;
        includeTrace?: boolean;
        includeIn?: boolean;
        includeOut?: boolean;
        startBlock?: string;
        endBlock?: string;
        startTimestamp?: string;
        endTimestamp?: string;
        transactionStatus?: Array<number>;
        methodSignature?: string;
        limit?: number;
        pageToken?: string;
    };
    url: '/api/v1/solidity/{owner}/{slug}/search_transactions';
};

export type SearchTransactionsResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceEvmSearchTransactionsResponse;
};

export type SearchTransactionsResponse = SearchTransactionsResponses[keyof SearchTransactionsResponses];

export type GetSimulationsData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
    };
    query?: {
        labelContains?: string;
        page?: number;
        pageSize?: number;
    };
    url: '/api/v1/solidity/{owner}/{slug}/simulation';
};

export type GetSimulationsResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetSimulationsResponse;
};

export type GetSimulationsResponse = GetSimulationsResponses[keyof GetSimulationsResponses];

export type GetSimulationData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        simulationId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/simulation/{simulationId}';
};

export type GetSimulationResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetSimulationResponse;
};

export type GetSimulationResponse = GetSimulationResponses[keyof GetSimulationResponses];

export type GetSimulationBundleInProjectData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        bundleId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/simulation_bundle/{bundleId}';
};

export type GetSimulationBundleInProjectResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceGetSimulationBundleResponse;
};

export type GetSimulationBundleInProjectResponse = GetSimulationBundleInProjectResponses[keyof GetSimulationBundleInProjectResponses];

export type GetCallTraceByBundleData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        chainId: string;
        bundleId: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/{chainId}/bundle/{bundleId}/call_trace';
};

export type GetCallTraceByBundleResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceByBundleResponse = GetCallTraceByBundleResponses[keyof GetCallTraceByBundleResponses];

export type SimulateTransactionData = {
    body: SolidityServiceSolidityApiServiceSimulateTransactionBody;
    path: {
        owner: string;
        slug: string;
        chainId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation';
};

export type SimulateTransactionResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceSimulateTransactionResponse;
};

export type SimulateTransactionResponse = SimulateTransactionResponses[keyof SimulateTransactionResponses];

export type GetCallTraceBySimulationData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        chainId: string;
        simulationId: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation/{simulationId}/call_trace';
};

export type GetCallTraceBySimulationResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceBySimulationResponse = GetCallTraceBySimulationResponses[keyof GetCallTraceBySimulationResponses];

export type SimulateTransactionBundleData = {
    body: SolidityServiceSolidityApiServiceSimulateTransactionBundleBody;
    path: {
        owner: string;
        slug: string;
        chainId: string;
    };
    query?: never;
    url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation_bundle';
};

export type SimulateTransactionBundleResponses = {
    /**
     * A successful response.
     */
    200: SolidityServiceSimulateTransactionBundleResponse;
};

export type SimulateTransactionBundleResponse = SimulateTransactionBundleResponses[keyof SimulateTransactionBundleResponses];

export type GetCallTraceByTransactionData = {
    body?: never;
    path: {
        owner: string;
        slug: string;
        chainId: string;
        txHash: string;
    };
    query?: {
        /**
         * Fetch the decoded trace, which will give you the function info, decoded parameters of both external and internal call trace.
         */
        withInternalCalls?: boolean;
        /**
         * Disable optimizations to make internal calls more accurate, but gas costs will differ from the actual execution.
         */
        disableOptimizer?: boolean;
        /**
         * Only effective when disableOptimizer=true.
         */
        ignoreGasCost?: boolean;
    };
    url: '/api/v1/solidity/{owner}/{slug}/{chainId}/transaction/{txHash}/call_trace';
};

export type GetCallTraceByTransactionResponses = {
    /**
     * A successful response.
     */
    200: GoogleApiHttpBody;
};

export type GetCallTraceByTransactionResponse = GetCallTraceByTransactionResponses[keyof GetCallTraceByTransactionResponses];

export type ClientOptions = {
    baseUrl: 'https://app.sentio.xyz' | (string & {});
};