/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CommonRichValueNullValue } from './CommonRichValueNullValue.js';
import {
    CommonRichValueNullValueFromJSON,
    CommonRichValueNullValueFromJSONTyped,
    CommonRichValueNullValueToJSON,
    CommonRichValueNullValueToJSONTyped,
} from './CommonRichValueNullValue.js';
import type { CommonBigInteger } from './CommonBigInteger.js';
import {
    CommonBigIntegerFromJSON,
    CommonBigIntegerFromJSONTyped,
    CommonBigIntegerToJSON,
    CommonBigIntegerToJSONTyped,
} from './CommonBigInteger.js';
import type { CommonRichValueList } from './CommonRichValueList.js';
import {
    CommonRichValueListFromJSON,
    CommonRichValueListFromJSONTyped,
    CommonRichValueListToJSON,
    CommonRichValueListToJSONTyped,
} from './CommonRichValueList.js';
import type { CommonRichStruct } from './CommonRichStruct.js';
import {
    CommonRichStructFromJSON,
    CommonRichStructFromJSONTyped,
    CommonRichStructToJSON,
    CommonRichStructToJSONTyped,
} from './CommonRichStruct.js';
import type { CommonBigDecimal } from './CommonBigDecimal.js';
import {
    CommonBigDecimalFromJSON,
    CommonBigDecimalFromJSONTyped,
    CommonBigDecimalToJSON,
    CommonBigDecimalToJSONTyped,
} from './CommonBigDecimal.js';

/**
 * 
 * @export
 * @interface CommonRichValue
 */
export interface CommonRichValue {
    /**
     * 
     * @type {CommonRichValueNullValue}
     * @memberof CommonRichValue
     */
    nullValue?: CommonRichValueNullValue;
    /**
     * 
     * @type {number}
     * @memberof CommonRichValue
     */
    intValue?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonRichValue
     */
    floatValue?: number;
    /**
     * 
     * @type {string}
     * @memberof CommonRichValue
     */
    bytesValue?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommonRichValue
     */
    boolValue?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CommonRichValue
     */
    stringValue?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommonRichValue
     */
    timestampValue?: Date;
    /**
     * 
     * @type {CommonBigInteger}
     * @memberof CommonRichValue
     */
    bigintValue?: CommonBigInteger;
    /**
     * 
     * @type {CommonBigDecimal}
     * @memberof CommonRichValue
     */
    bigdecimalValue?: CommonBigDecimal;
    /**
     * 
     * @type {CommonRichValueList}
     * @memberof CommonRichValue
     */
    listValue?: CommonRichValueList;
    /**
     * 
     * @type {CommonRichStruct}
     * @memberof CommonRichValue
     */
    structValue?: CommonRichStruct;
}



/**
 * Check if a given object implements the CommonRichValue interface.
 */
export function instanceOfCommonRichValue(value: object): value is CommonRichValue {
    return true;
}

export function CommonRichValueFromJSON(json: any): CommonRichValue {
    return CommonRichValueFromJSONTyped(json, false);
}

export function CommonRichValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonRichValue {
    if (json == null) {
        return json;
    }
    return {
        
        'nullValue': json['nullValue'] == null ? undefined : CommonRichValueNullValueFromJSON(json['nullValue']),
        'intValue': json['intValue'] == null ? undefined : json['intValue'],
        'floatValue': json['floatValue'] == null ? undefined : json['floatValue'],
        'bytesValue': json['bytesValue'] == null ? undefined : json['bytesValue'],
        'boolValue': json['boolValue'] == null ? undefined : json['boolValue'],
        'stringValue': json['stringValue'] == null ? undefined : json['stringValue'],
        'timestampValue': json['timestampValue'] == null ? undefined : (new Date(json['timestampValue'])),
        'bigintValue': json['bigintValue'] == null ? undefined : CommonBigIntegerFromJSON(json['bigintValue']),
        'bigdecimalValue': json['bigdecimalValue'] == null ? undefined : CommonBigDecimalFromJSON(json['bigdecimalValue']),
        'listValue': json['listValue'] == null ? undefined : CommonRichValueListFromJSON(json['listValue']),
        'structValue': json['structValue'] == null ? undefined : CommonRichStructFromJSON(json['structValue']),
    };
}

  export function CommonRichValueToJSON(json: any): CommonRichValue {
      return CommonRichValueToJSONTyped(json, false);
  }

  export function CommonRichValueToJSONTyped(value?: CommonRichValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nullValue': CommonRichValueNullValueToJSON(value['nullValue']),
        'intValue': value['intValue'],
        'floatValue': value['floatValue'],
        'bytesValue': value['bytesValue'],
        'boolValue': value['boolValue'],
        'stringValue': value['stringValue'],
        'timestampValue': value['timestampValue'] == null ? undefined : ((value['timestampValue']).toISOString()),
        'bigintValue': CommonBigIntegerToJSON(value['bigintValue']),
        'bigdecimalValue': CommonBigDecimalToJSON(value['bigdecimalValue']),
        'listValue': CommonRichValueListToJSON(value['listValue']),
        'structValue': CommonRichStructToJSON(value['structValue']),
    };
}

