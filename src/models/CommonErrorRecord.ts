/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommonErrorRecord
 */
export interface CommonErrorRecord {
    /**
     * 
     * @type {string}
     * @memberof CommonErrorRecord
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof CommonErrorRecord
     */
    namespace?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonErrorRecord
     */
    code?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonErrorRecord
     */
    namespaceCode?: number;
    /**
     * 
     * @type {string}
     * @memberof CommonErrorRecord
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommonErrorRecord
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the CommonErrorRecord interface.
 */
export function instanceOfCommonErrorRecord(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonErrorRecordFromJSON(json: any): CommonErrorRecord {
    return CommonErrorRecordFromJSONTyped(json, false);
}

export function CommonErrorRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonErrorRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'namespaceCode': !exists(json, 'namespaceCode') ? undefined : json['namespaceCode'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function CommonErrorRecordToJSON(value?: CommonErrorRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'namespace': value.namespace,
        'code': value.code,
        'namespaceCode': value.namespaceCode,
        'message': value.message,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

