/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CommonTier } from './CommonTier.js';
import {
    CommonTierFromJSON,
    CommonTierFromJSONTyped,
    CommonTierToJSON,
    CommonTierToJSONTyped,
} from './CommonTier.js';
import type { CommonOrganization } from './CommonOrganization.js';
import {
    CommonOrganizationFromJSON,
    CommonOrganizationFromJSONTyped,
    CommonOrganizationToJSON,
    CommonOrganizationToJSONTyped,
} from './CommonOrganization.js';
import type { CommonUser } from './CommonUser.js';
import {
    CommonUserFromJSON,
    CommonUserFromJSONTyped,
    CommonUserToJSON,
    CommonUserToJSONTyped,
} from './CommonUser.js';

/**
 * 
 * @export
 * @interface CommonOwner
 */
export interface CommonOwner {
    /**
     * 
     * @type {CommonUser}
     * @memberof CommonOwner
     */
    user?: CommonUser;
    /**
     * 
     * @type {CommonOrganization}
     * @memberof CommonOwner
     */
    organization?: CommonOrganization;
    /**
     * 
     * @type {CommonTier}
     * @memberof CommonOwner
     */
    tier?: CommonTier;
}



/**
 * Check if a given object implements the CommonOwner interface.
 */
export function instanceOfCommonOwner(value: object): value is CommonOwner {
    return true;
}

export function CommonOwnerFromJSON(json: any): CommonOwner {
    return CommonOwnerFromJSONTyped(json, false);
}

export function CommonOwnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonOwner {
    if (json == null) {
        return json;
    }
    return {
        
        'user': json['user'] == null ? undefined : CommonUserFromJSON(json['user']),
        'organization': json['organization'] == null ? undefined : CommonOrganizationFromJSON(json['organization']),
        'tier': json['tier'] == null ? undefined : CommonTierFromJSON(json['tier']),
    };
}

  export function CommonOwnerToJSON(json: any): CommonOwner {
      return CommonOwnerToJSONTyped(json, false);
  }

  export function CommonOwnerToJSONTyped(value?: CommonOwner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': CommonUserToJSON(value['user']),
        'organization': CommonOrganizationToJSON(value['organization']),
        'tier': CommonTierToJSON(value['tier']),
    };
}

