/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CommonFunction } from './CommonFunction.js';
import {
    CommonFunctionFromJSON,
    CommonFunctionFromJSONTyped,
    CommonFunctionToJSON,
} from './CommonFunction.js';

/**
 * the formula to combine multiple queries
 * @export
 * @interface CommonFormula
 */
export interface CommonFormula {
    /**
     * 
     * @type {string}
     * @memberof CommonFormula
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonFormula
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonFormula
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommonFormula
     */
    disabled?: boolean;
    /**
     * 
     * @type {Array<CommonFunction>}
     * @memberof CommonFormula
     */
    functions?: Array<CommonFunction>;
}

/**
 * Check if a given object implements the CommonFormula interface.
 */
export function instanceOfCommonFormula(value: object): boolean {
    return true;
}

export function CommonFormulaFromJSON(json: any): CommonFormula {
    return CommonFormulaFromJSONTyped(json, false);
}

export function CommonFormulaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonFormula {
    if (json == null) {
        return json;
    }
    return {
        
        'expression': json['expression'] == null ? undefined : json['expression'],
        'alias': json['alias'] == null ? undefined : json['alias'],
        'id': json['id'] == null ? undefined : json['id'],
        'disabled': json['disabled'] == null ? undefined : json['disabled'],
        'functions': json['functions'] == null ? undefined : ((json['functions'] as Array<any>).map(CommonFunctionFromJSON)),
    };
}

export function CommonFormulaToJSON(value?: CommonFormula | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'expression': value['expression'],
        'alias': value['alias'],
        'id': value['id'],
        'disabled': value['disabled'],
        'functions': value['functions'] == null ? undefined : ((value['functions'] as Array<any>).map(CommonFunctionToJSON)),
    };
}

