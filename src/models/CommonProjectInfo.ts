/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonProjectVisibility } from './CommonProjectVisibility';
import {
    CommonProjectVisibilityFromJSON,
    CommonProjectVisibilityFromJSONTyped,
    CommonProjectVisibilityToJSON,
} from './CommonProjectVisibility';

/**
 * 
 * @export
 * @interface CommonProjectInfo
 */
export interface CommonProjectInfo {
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    owner?: string;
    /**
     * 
     * @type {CommonProjectVisibility}
     * @memberof CommonProjectInfo
     */
    visibility?: CommonProjectVisibility;
    /**
     * 
     * @type {boolean}
     * @memberof CommonProjectInfo
     */
    multiVersion?: boolean;
}

/**
 * Check if a given object implements the CommonProjectInfo interface.
 */
export function instanceOfCommonProjectInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonProjectInfoFromJSON(json: any): CommonProjectInfo {
    return CommonProjectInfoFromJSONTyped(json, false);
}

export function CommonProjectInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonProjectInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'visibility': !exists(json, 'visibility') ? undefined : CommonProjectVisibilityFromJSON(json['visibility']),
        'multiVersion': !exists(json, 'multiVersion') ? undefined : json['multiVersion'],
    };
}

export function CommonProjectInfoToJSON(value?: CommonProjectInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'displayName': value.displayName,
        'description': value.description,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'slug': value.slug,
        'owner': value.owner,
        'visibility': CommonProjectVisibilityToJSON(value.visibility),
        'multiVersion': value.multiVersion,
    };
}

