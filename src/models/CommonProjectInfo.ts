/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CommonProjectSuperset } from './CommonProjectSuperset.js';
import {
    CommonProjectSupersetFromJSON,
    CommonProjectSupersetFromJSONTyped,
    CommonProjectSupersetToJSON,
} from './CommonProjectSuperset.js';
import type { CommonProjectType } from './CommonProjectType.js';
import {
    CommonProjectTypeFromJSON,
    CommonProjectTypeFromJSONTyped,
    CommonProjectTypeToJSON,
} from './CommonProjectType.js';
import type { CommonProjectVisibility } from './CommonProjectVisibility.js';
import {
    CommonProjectVisibilityFromJSON,
    CommonProjectVisibilityFromJSONTyped,
    CommonProjectVisibilityToJSON,
} from './CommonProjectVisibility.js';

/**
 * 
 * @export
 * @interface CommonProjectInfo
 */
export interface CommonProjectInfo {
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonProjectInfo
     */
    owner?: string;
    /**
     * 
     * @type {CommonProjectVisibility}
     * @memberof CommonProjectInfo
     */
    visibility?: CommonProjectVisibility;
    /**
     * 
     * @type {CommonProjectType}
     * @memberof CommonProjectInfo
     */
    type?: CommonProjectType;
    /**
     * 
     * @type {boolean}
     * @memberof CommonProjectInfo
     */
    multiVersion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommonProjectInfo
     */
    supersetEnable?: boolean;
    /**
     * 
     * @type {CommonProjectSuperset}
     * @memberof CommonProjectInfo
     */
    superset?: CommonProjectSuperset;
    /**
     * 
     * @type {boolean}
     * @memberof CommonProjectInfo
     */
    enableDisk?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommonProjectInfo
     */
    enableMaterializedView?: boolean;
}

/**
 * Check if a given object implements the CommonProjectInfo interface.
 */
export function instanceOfCommonProjectInfo(value: object): boolean {
    return true;
}

export function CommonProjectInfoFromJSON(json: any): CommonProjectInfo {
    return CommonProjectInfoFromJSONTyped(json, false);
}

export function CommonProjectInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonProjectInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'description': json['description'] == null ? undefined : json['description'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'slug': json['slug'] == null ? undefined : json['slug'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'visibility': json['visibility'] == null ? undefined : CommonProjectVisibilityFromJSON(json['visibility']),
        'type': json['type'] == null ? undefined : CommonProjectTypeFromJSON(json['type']),
        'multiVersion': json['multiVersion'] == null ? undefined : json['multiVersion'],
        'supersetEnable': json['supersetEnable'] == null ? undefined : json['supersetEnable'],
        'superset': json['superset'] == null ? undefined : CommonProjectSupersetFromJSON(json['superset']),
        'enableDisk': json['enableDisk'] == null ? undefined : json['enableDisk'],
        'enableMaterializedView': json['enableMaterializedView'] == null ? undefined : json['enableMaterializedView'],
    };
}

export function CommonProjectInfoToJSON(value?: CommonProjectInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'displayName': value['displayName'],
        'description': value['description'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'slug': value['slug'],
        'owner': value['owner'],
        'visibility': CommonProjectVisibilityToJSON(value['visibility']),
        'type': CommonProjectTypeToJSON(value['type']),
        'multiVersion': value['multiVersion'],
        'supersetEnable': value['supersetEnable'],
        'superset': CommonProjectSupersetToJSON(value['superset']),
        'enableDisk': value['enableDisk'],
        'enableMaterializedView': value['enableMaterializedView'],
    };
}

