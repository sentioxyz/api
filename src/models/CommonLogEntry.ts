/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommonLogEntry
 */
export interface CommonLogEntry {
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    logLevel?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    logType?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    contractName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    contractAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    blockNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    chainId?: string;
    /**
     * 
     * @type {object}
     * @memberof CommonLogEntry
     */
    attributes?: object;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    transactionHash?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonLogEntry
     */
    highlightedMessage?: string;
}

/**
 * Check if a given object implements the CommonLogEntry interface.
 */
export function instanceOfCommonLogEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonLogEntryFromJSON(json: any): CommonLogEntry {
    return CommonLogEntryFromJSONTyped(json, false);
}

export function CommonLogEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonLogEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': !exists(json, 'message') ? undefined : json['message'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'logLevel': !exists(json, 'logLevel') ? undefined : json['logLevel'],
        'logType': !exists(json, 'logType') ? undefined : json['logType'],
        'contractName': !exists(json, 'contractName') ? undefined : json['contractName'],
        'contractAddress': !exists(json, 'contractAddress') ? undefined : json['contractAddress'],
        'blockNumber': !exists(json, 'blockNumber') ? undefined : json['blockNumber'],
        'chainId': !exists(json, 'chainId') ? undefined : json['chainId'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'transactionHash': !exists(json, 'transactionHash') ? undefined : json['transactionHash'],
        'highlightedMessage': !exists(json, 'highlightedMessage') ? undefined : json['highlightedMessage'],
    };
}

export function CommonLogEntryToJSON(value?: CommonLogEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message': value.message,
        'timestamp': value.timestamp,
        'logLevel': value.logLevel,
        'logType': value.logType,
        'contractName': value.contractName,
        'contractAddress': value.contractAddress,
        'blockNumber': value.blockNumber,
        'chainId': value.chainId,
        'attributes': value.attributes,
        'id': value.id,
        'transactionHash': value.transactionHash,
        'highlightedMessage': value.highlightedMessage,
    };
}

