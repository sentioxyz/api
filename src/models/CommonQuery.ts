/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonAggregate } from './CommonAggregate';
import {
    CommonAggregateFromJSON,
    CommonAggregateFromJSONTyped,
    CommonAggregateToJSON,
} from './CommonAggregate';
import type { CommonFunction } from './CommonFunction';
import {
    CommonFunctionFromJSON,
    CommonFunctionFromJSONTyped,
    CommonFunctionToJSON,
} from './CommonFunction';

/**
 * 
 * @export
 * @interface CommonQuery
 */
export interface CommonQuery {
    /**
     * 
     * @type {string}
     * @memberof CommonQuery
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonQuery
     */
    alias?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonQuery
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommonQuery
     */
    labelSelector?: { [key: string]: string; };
    /**
     * 
     * @type {CommonAggregate}
     * @memberof CommonQuery
     */
    aggregate?: CommonAggregate;
    /**
     * 
     * @type {Array<CommonFunction>}
     * @memberof CommonQuery
     */
    functions?: Array<CommonFunction>;
    /**
     * 
     * @type {boolean}
     * @memberof CommonQuery
     */
    disabled?: boolean;
}

/**
 * Check if a given object implements the CommonQuery interface.
 */
export function instanceOfCommonQuery(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonQueryFromJSON(json: any): CommonQuery {
    return CommonQueryFromJSONTyped(json, false);
}

export function CommonQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'query': !exists(json, 'query') ? undefined : json['query'],
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'labelSelector': !exists(json, 'labelSelector') ? undefined : json['labelSelector'],
        'aggregate': !exists(json, 'aggregate') ? undefined : CommonAggregateFromJSON(json['aggregate']),
        'functions': !exists(json, 'functions') ? undefined : ((json['functions'] as Array<any>).map(CommonFunctionFromJSON)),
        'disabled': !exists(json, 'disabled') ? undefined : json['disabled'],
    };
}

export function CommonQueryToJSON(value?: CommonQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'query': value.query,
        'alias': value.alias,
        'id': value.id,
        'labelSelector': value.labelSelector,
        'aggregate': CommonAggregateToJSON(value.aggregate),
        'functions': value.functions === undefined ? undefined : ((value.functions as Array<any>).map(CommonFunctionToJSON)),
        'disabled': value.disabled,
    };
}

