/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonAny } from './CommonAny';
import {
    CommonAnyFromJSON,
    CommonAnyFromJSONTyped,
    CommonAnyToJSON,
} from './CommonAny';
import type { CommonSelectorOperatorType } from './CommonSelectorOperatorType';
import {
    CommonSelectorOperatorTypeFromJSON,
    CommonSelectorOperatorTypeFromJSONTyped,
    CommonSelectorOperatorTypeToJSON,
} from './CommonSelectorOperatorType';

/**
 * 
 * @export
 * @interface CommonSelector
 */
export interface CommonSelector {
    /**
     * 
     * @type {string}
     * @memberof CommonSelector
     */
    key?: string;
    /**
     * 
     * @type {CommonSelectorOperatorType}
     * @memberof CommonSelector
     */
    operator?: CommonSelectorOperatorType;
    /**
     * 
     * @type {Array<CommonAny>}
     * @memberof CommonSelector
     */
    value?: Array<CommonAny>;
}

/**
 * Check if a given object implements the CommonSelector interface.
 */
export function instanceOfCommonSelector(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommonSelectorFromJSON(json: any): CommonSelector {
    return CommonSelectorFromJSONTyped(json, false);
}

export function CommonSelectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonSelector {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : json['key'],
        'operator': !exists(json, 'operator') ? undefined : CommonSelectorOperatorTypeFromJSON(json['operator']),
        'value': !exists(json, 'value') ? undefined : ((json['value'] as Array<any>).map(CommonAnyFromJSON)),
    };
}

export function CommonSelectorToJSON(value?: CommonSelector | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'operator': CommonSelectorOperatorTypeToJSON(value.operator),
        'value': value.value === undefined ? undefined : ((value.value as Array<any>).map(CommonAnyToJSON)),
    };
}

