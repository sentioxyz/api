/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommonNotificationType } from './CommonNotificationType';
import {
    CommonNotificationTypeFromJSON,
    CommonNotificationTypeFromJSONTyped,
    CommonNotificationTypeToJSON,
} from './CommonNotificationType';
import type { CommonOwner } from './CommonOwner';
import {
    CommonOwnerFromJSON,
    CommonOwnerFromJSONTyped,
    CommonOwnerToJSON,
} from './CommonOwner';
import type { CommonProject } from './CommonProject';
import {
    CommonProjectFromJSON,
    CommonProjectFromJSONTyped,
    CommonProjectToJSON,
} from './CommonProject';

/**
 * 
 * @export
 * @interface CommonNotification
 */
export interface CommonNotification {
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    level?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommonNotification
     */
    createdAt?: Date;
    /**
     * 
     * @type {CommonNotificationType}
     * @memberof CommonNotification
     */
    type?: CommonNotificationType;
    /**
     * 
     * @type {string}
     * @memberof CommonNotification
     */
    ownerId?: string;
    /**
     * 
     * @type {CommonOwner}
     * @memberof CommonNotification
     */
    owner?: CommonOwner;
    /**
     * 
     * @type {CommonProject}
     * @memberof CommonNotification
     */
    project?: CommonProject;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommonNotification
     */
    attributes?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof CommonNotification
     */
    read?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CommonNotification
     */
    repeat?: number;
}

/**
 * Check if a given object implements the CommonNotification interface.
 */
export function instanceOfCommonNotification(value: object): boolean {
    return true;
}

export function CommonNotificationFromJSON(json: any): CommonNotification {
    return CommonNotificationFromJSONTyped(json, false);
}

export function CommonNotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonNotification {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'projectId': json['projectId'] == null ? undefined : json['projectId'],
        'source': json['source'] == null ? undefined : json['source'],
        'level': json['level'] == null ? undefined : json['level'],
        'message': json['message'] == null ? undefined : json['message'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'type': json['type'] == null ? undefined : CommonNotificationTypeFromJSON(json['type']),
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'owner': json['owner'] == null ? undefined : CommonOwnerFromJSON(json['owner']),
        'project': json['project'] == null ? undefined : CommonProjectFromJSON(json['project']),
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'read': json['read'] == null ? undefined : json['read'],
        'repeat': json['repeat'] == null ? undefined : json['repeat'],
    };
}

export function CommonNotificationToJSON(value?: CommonNotification | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'projectId': value['projectId'],
        'source': value['source'],
        'level': value['level'],
        'message': value['message'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'type': CommonNotificationTypeToJSON(value['type']),
        'ownerId': value['ownerId'],
        'owner': CommonOwnerToJSON(value['owner']),
        'project': CommonProjectToJSON(value['project']),
        'attributes': value['attributes'],
        'read': value['read'],
        'repeat': value['repeat'],
    };
}

