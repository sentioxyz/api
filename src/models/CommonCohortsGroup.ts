/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CommonJoinOperator } from './CommonJoinOperator.js';
import {
    CommonJoinOperatorFromJSON,
    CommonJoinOperatorFromJSONTyped,
    CommonJoinOperatorToJSON,
    CommonJoinOperatorToJSONTyped,
} from './CommonJoinOperator.js';
import type { CommonCohortsFilter } from './CommonCohortsFilter.js';
import {
    CommonCohortsFilterFromJSON,
    CommonCohortsFilterFromJSONTyped,
    CommonCohortsFilterToJSON,
    CommonCohortsFilterToJSONTyped,
} from './CommonCohortsFilter.js';

/**
 * 
 * @export
 * @interface CommonCohortsGroup
 */
export interface CommonCohortsGroup {
    /**
     * 
     * @type {CommonJoinOperator}
     * @memberof CommonCohortsGroup
     */
    joinOperator?: CommonJoinOperator;
    /**
     * 
     * @type {Array<CommonCohortsFilter>}
     * @memberof CommonCohortsGroup
     */
    filters?: Array<CommonCohortsFilter>;
}



/**
 * Check if a given object implements the CommonCohortsGroup interface.
 */
export function instanceOfCommonCohortsGroup(value: object): value is CommonCohortsGroup {
    return true;
}

export function CommonCohortsGroupFromJSON(json: any): CommonCohortsGroup {
    return CommonCohortsGroupFromJSONTyped(json, false);
}

export function CommonCohortsGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonCohortsGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'joinOperator': json['joinOperator'] == null ? undefined : CommonJoinOperatorFromJSON(json['joinOperator']),
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(CommonCohortsFilterFromJSON)),
    };
}

  export function CommonCohortsGroupToJSON(json: any): CommonCohortsGroup {
      return CommonCohortsGroupToJSONTyped(json, false);
  }

  export function CommonCohortsGroupToJSONTyped(value?: CommonCohortsGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'joinOperator': CommonJoinOperatorToJSON(value['joinOperator']),
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(CommonCohortsFilterToJSON)),
    };
}

