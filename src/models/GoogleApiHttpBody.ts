/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GoogleProtobufAny } from './GoogleProtobufAny.js';
import {
    GoogleProtobufAnyFromJSON,
    GoogleProtobufAnyFromJSONTyped,
    GoogleProtobufAnyToJSON,
} from './GoogleProtobufAny.js';

/**
 * Message that represents an arbitrary HTTP body. It should only be used for
 * payload formats that can't be represented as JSON, such as raw binary or
 * an HTML page.
 * 
 * 
 * This message can be used both in streaming and non-streaming API methods in
 * the request as well as the response.
 * 
 * It can be used as a top-level request field, which is convenient if one
 * wants to extract parameters from either the URL or HTTP template into the
 * request fields and also want access to the raw HTTP body.
 * 
 * Example:
 * 
 *     message GetResourceRequest {
 *       // A unique request id.
 *       string request_id = 1;
 * 
 *       // The raw HTTP body is bound to this field.
 *       google.api.HttpBody http_body = 2;
 * 
 *     }
 * 
 *     service ResourceService {
 *       rpc GetResource(GetResourceRequest)
 *         returns (google.api.HttpBody);
 *       rpc UpdateResource(google.api.HttpBody)
 *         returns (google.protobuf.Empty);
 * 
 *     }
 * 
 * Example with streaming methods:
 * 
 *     service CaldavService {
 *       rpc GetCalendar(stream google.api.HttpBody)
 *         returns (stream google.api.HttpBody);
 *       rpc UpdateCalendar(stream google.api.HttpBody)
 *         returns (stream google.api.HttpBody);
 * 
 *     }
 * 
 * Use of this type only changes how the request and response bodies are
 * handled, all other features will continue to work unchanged.
 * @export
 * @interface GoogleApiHttpBody
 */
export interface GoogleApiHttpBody {
    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     * @type {string}
     * @memberof GoogleApiHttpBody
     */
    contentType?: string;
    /**
     * The HTTP request/response body as raw binary.
     * @type {string}
     * @memberof GoogleApiHttpBody
     */
    data?: string;
    /**
     * Application specific response metadata. Must be set in the first response
     * for streaming APIs.
     * @type {Array<GoogleProtobufAny>}
     * @memberof GoogleApiHttpBody
     */
    extensions?: Array<GoogleProtobufAny>;
}

/**
 * Check if a given object implements the GoogleApiHttpBody interface.
 */
export function instanceOfGoogleApiHttpBody(value: object): boolean {
    return true;
}

export function GoogleApiHttpBodyFromJSON(json: any): GoogleApiHttpBody {
    return GoogleApiHttpBodyFromJSONTyped(json, false);
}

export function GoogleApiHttpBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoogleApiHttpBody {
    if (json == null) {
        return json;
    }
    return {
        
        'contentType': json['contentType'] == null ? undefined : json['contentType'],
        'data': json['data'] == null ? undefined : json['data'],
        'extensions': json['extensions'] == null ? undefined : ((json['extensions'] as Array<any>).map(GoogleProtobufAnyFromJSON)),
    };
}

export function GoogleApiHttpBodyToJSON(value?: GoogleApiHttpBody | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'contentType': value['contentType'],
        'data': value['data'],
        'extensions': value['extensions'] == null ? undefined : ((value['extensions'] as Array<any>).map(GoogleProtobufAnyToJSON)),
    };
}

