/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InsightsServiceInsightsServiceQueryBody,
  InsightsServiceInsightsServiceRetentionBody,
  InsightsServiceListCoinsResponse,
  InsightsServiceQueryRequest,
  InsightsServiceQueryResponse,
  InsightsServiceRetentionRequest,
  InsightsServiceRetentionResponse,
} from '../models/index';
import {
    InsightsServiceInsightsServiceQueryBodyFromJSON,
    InsightsServiceInsightsServiceQueryBodyToJSON,
    InsightsServiceInsightsServiceRetentionBodyFromJSON,
    InsightsServiceInsightsServiceRetentionBodyToJSON,
    InsightsServiceListCoinsResponseFromJSON,
    InsightsServiceListCoinsResponseToJSON,
    InsightsServiceQueryRequestFromJSON,
    InsightsServiceQueryRequestToJSON,
    InsightsServiceQueryResponseFromJSON,
    InsightsServiceQueryResponseToJSON,
    InsightsServiceRetentionRequestFromJSON,
    InsightsServiceRetentionRequestToJSON,
    InsightsServiceRetentionResponseFromJSON,
    InsightsServiceRetentionResponseToJSON,
} from '../models/index';

export interface ListCoinsRequest {
    owner: string;
    slug: string;
    projectId?: string;
    version?: number;
    limit?: number;
    offset?: number;
    searchQuery?: string;
}

export interface ListCoins2Request {
    projectOwner?: string;
    projectSlug?: string;
    projectId?: string;
    version?: number;
    limit?: number;
    offset?: number;
    searchQuery?: string;
}

export interface QueryRequest {
    owner: string;
    slug: string;
    body: InsightsServiceInsightsServiceQueryBody;
}

export interface Query2Request {
    body: InsightsServiceQueryRequest;
}

export interface RetentionRequest {
    owner: string;
    slug: string;
    body: InsightsServiceInsightsServiceRetentionBody;
}

export interface Retention2Request {
    body: InsightsServiceRetentionRequest;
}

/**
 * 
 */
export class InsightApi extends runtime.BaseAPI {

    /**
     * Get a list of coins in a project.
     */
    async listCoinsRaw(requestParameters: ListCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceListCoinsResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling listCoins().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling listCoins().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/coins`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceListCoinsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of coins in a project.
     */
    async listCoins(requestParameters: ListCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceListCoinsResponse> {
        const response = await this.listCoinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of coins in a project.
     */
    async listCoins2Raw(requestParameters: ListCoins2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceListCoinsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['projectOwner'] != null) {
            queryParameters['projectOwner'] = requestParameters['projectOwner'];
        }

        if (requestParameters['projectSlug'] != null) {
            queryParameters['projectSlug'] = requestParameters['projectSlug'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/coins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceListCoinsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of coins in a project.
     */
    async listCoins2(requestParameters: ListCoins2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceListCoinsResponse> {
        const response = await this.listCoins2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query for metrics in a project.
     */
    async queryRaw(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceQueryResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling query().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling query().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling query().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceInsightsServiceQueryBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query for metrics in a project.
     */
    async query(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceQueryResponse> {
        const response = await this.queryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query for metrics in a project.
     */
    async query2Raw(requestParameters: Query2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceQueryResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling query2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceQueryRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query for metrics in a project.
     */
    async query2(requestParameters: Query2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceQueryResponse> {
        const response = await this.query2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retentionRaw(requestParameters: RetentionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceRetentionResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling retention().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling retention().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling retention().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/retention`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceInsightsServiceRetentionBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceRetentionResponseFromJSON(jsonValue));
    }

    /**
     */
    async retention(requestParameters: RetentionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceRetentionResponse> {
        const response = await this.retentionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async retention2Raw(requestParameters: Retention2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceRetentionResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling retention2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/insights/retention`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceRetentionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceRetentionResponseFromJSON(jsonValue));
    }

    /**
     */
    async retention2(requestParameters: Retention2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceRetentionResponse> {
        const response = await this.retention2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
