/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonUser,
  MetricsServiceLogQueryResponse,
  MetricsServiceMetricsQueryResponse,
  MetricsServiceQueryValueResponse,
  ProcessorServiceGetProcessorStatusResponse,
  ProcessorServiceGetProjectVersionsResponse,
  QueryLogRequest,
  QueryRangeRequest,
  QueryRequest,
  WebServiceDashboard,
  WebServiceExportDashboardResponse,
  WebServiceGetDashboardResponse,
  WebServiceGetProjectResponse,
  WebServiceImportDashboardRequest,
  WebServiceImportDashboardResponse,
} from '../models';
import {
    CommonUserFromJSON,
    CommonUserToJSON,
    MetricsServiceLogQueryResponseFromJSON,
    MetricsServiceLogQueryResponseToJSON,
    MetricsServiceMetricsQueryResponseFromJSON,
    MetricsServiceMetricsQueryResponseToJSON,
    MetricsServiceQueryValueResponseFromJSON,
    MetricsServiceQueryValueResponseToJSON,
    ProcessorServiceGetProcessorStatusResponseFromJSON,
    ProcessorServiceGetProcessorStatusResponseToJSON,
    ProcessorServiceGetProjectVersionsResponseFromJSON,
    ProcessorServiceGetProjectVersionsResponseToJSON,
    QueryLogRequestFromJSON,
    QueryLogRequestToJSON,
    QueryRangeRequestFromJSON,
    QueryRangeRequestToJSON,
    QueryRequestFromJSON,
    QueryRequestToJSON,
    WebServiceDashboardFromJSON,
    WebServiceDashboardToJSON,
    WebServiceExportDashboardResponseFromJSON,
    WebServiceExportDashboardResponseToJSON,
    WebServiceGetDashboardResponseFromJSON,
    WebServiceGetDashboardResponseToJSON,
    WebServiceGetProjectResponseFromJSON,
    WebServiceGetProjectResponseToJSON,
    WebServiceImportDashboardRequestFromJSON,
    WebServiceImportDashboardRequestToJSON,
    WebServiceImportDashboardResponseFromJSON,
    WebServiceImportDashboardResponseToJSON,
} from '../models';

export interface DeleteDashboardRequest {
    dashboardId: string;
    projectId?: string;
}

export interface ExportDashboardRequest {
    dashboardId: string;
}

export interface GetDashboardRequest {
    dashboardId?: string;
    projectId?: string;
}

export interface GetDashboard2Request {
    dashboardId: string;
    projectId?: string;
}

export interface GetProcessorStatusRequest {
    projectId?: string;
    id?: string;
}

export interface GetProjectRequest {
    owner: string;
    slug: string;
}

export interface GetProjectVersionsRequest {
    projectId: string;
}

export interface GetUserRequest {
    userId?: string;
    subject?: string;
    email?: string;
}

export interface GetUser2Request {
    userId: string;
    subject?: string;
    email?: string;
}

export interface ImportDashboardRequest {
    body: WebServiceImportDashboardRequest;
}

export interface QueryOperationRequest {
    owner: string;
    slug: string;
    body: QueryRequest;
}

export interface QueryLogOperationRequest {
    owner: string;
    slug: string;
    body: QueryLogRequest;
}

export interface QueryLog2Request {
    owner: string;
    slug: string;
    projectId?: string;
    query?: string;
    timeRangeStartRelativeTimeUnit?: string;
    timeRangeStartRelativeTimeValue?: number;
    timeRangeStartAbsoluteTime?: string;
    timeRangeEndRelativeTimeUnit?: string;
    timeRangeEndRelativeTimeValue?: number;
    timeRangeEndAbsoluteTime?: string;
    timeRangeStep?: string;
    timeRangeIntervalValue?: number;
    timeRangeIntervalUnit?: string;
    timeRangeTimezone?: string;
    limit?: number;
    version?: number;
}

export interface QueryLogMetricsRequest {
    owner: string;
    slug: string;
    body: QueryLogRequest;
}

export interface QueryLogMetrics2Request {
    owner: string;
    slug: string;
    projectId?: string;
    query?: string;
    timeRangeStartRelativeTimeUnit?: string;
    timeRangeStartRelativeTimeValue?: number;
    timeRangeStartAbsoluteTime?: string;
    timeRangeEndRelativeTimeUnit?: string;
    timeRangeEndRelativeTimeValue?: number;
    timeRangeEndAbsoluteTime?: string;
    timeRangeStep?: string;
    timeRangeIntervalValue?: number;
    timeRangeIntervalUnit?: string;
    timeRangeTimezone?: string;
    limit?: number;
    version?: number;
}

export interface QueryRangeOperationRequest {
    owner: string;
    slug: string;
    body: QueryRangeRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete dashboard by id
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceDashboard>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling deleteDashboard.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceDashboardFromJSON(jsonValue));
    }

    /**
     * Delete dashboard by id
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceDashboard> {
        const response = await this.deleteDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export dashboard json by id
     */
    async exportDashboardRaw(requestParameters: ExportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceExportDashboardResponse>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling exportDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}/json`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceExportDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Export dashboard json by id
     */
    async exportDashboard(requestParameters: ExportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceExportDashboardResponse> {
        const response = await this.exportDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get default dashboard or get dashboard by id
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        const queryParameters: any = {};

        if (requestParameters.dashboardId !== undefined) {
            queryParameters['dashboardId'] = requestParameters.dashboardId;
        }

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get default dashboard or get dashboard by id
     */
    async getDashboard(requestParameters: GetDashboardRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get default dashboard or get dashboard by id
     */
    async getDashboard2Raw(requestParameters: GetDashboard2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        if (requestParameters.dashboardId === null || requestParameters.dashboardId === undefined) {
            throw new runtime.RequiredError('dashboardId','Required parameter requestParameters.dashboardId was null or undefined when calling getDashboard2.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters.dashboardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get default dashboard or get dashboard by id
     */
    async getDashboard2(requestParameters: GetDashboard2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.getDashboard2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProcessorStatusRaw(requestParameters: GetProcessorStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorServiceGetProcessorStatusResponse>> {
        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/processors/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorServiceGetProcessorStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async getProcessorStatus(requestParameters: GetProcessorStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorServiceGetProcessorStatusResponse> {
        const response = await this.getProcessorStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project detail
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetProjectResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getProject.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/project/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get project detail
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetProjectResponse> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectVersionsRaw(requestParameters: GetProjectVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessorServiceGetProjectVersionsResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/processors/{projectId}/versions`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorServiceGetProjectVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getProjectVersions(requestParameters: GetProjectVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessorServiceGetProjectVersionsResponse> {
        const response = await this.getProjectVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonUser>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUserFromJSON(jsonValue));
    }

    /**
     */
    async getUser(requestParameters: GetUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonUser> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUser2Raw(requestParameters: GetUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser2.');
        }

        const queryParameters: any = {};

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUserFromJSON(jsonValue));
    }

    /**
     */
    async getUser2(requestParameters: GetUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonUser> {
        const response = await this.getUser2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import dashboard json
     */
    async importDashboardRaw(requestParameters: ImportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceImportDashboardResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling importDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebServiceImportDashboardRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceImportDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Import dashboard json
     */
    async importDashboard(requestParameters: ImportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceImportDashboardResponse> {
        const response = await this.importDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryRaw(requestParameters: QueryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceQueryValueResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling query.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling query.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling query.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceQueryValueResponseFromJSON(jsonValue));
    }

    /**
     */
    async query(requestParameters: QueryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceQueryValueResponse> {
        const response = await this.queryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogRaw(requestParameters: QueryLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceLogQueryResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling queryLog.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling queryLog.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling queryLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/logs/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryLogRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceLogQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLog(requestParameters: QueryLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceLogQueryResponse> {
        const response = await this.queryLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLog2Raw(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceLogQueryResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling queryLog2.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling queryLog2.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.timeRangeStartRelativeTimeUnit !== undefined) {
            queryParameters['timeRange.start.relativeTime.unit'] = requestParameters.timeRangeStartRelativeTimeUnit;
        }

        if (requestParameters.timeRangeStartRelativeTimeValue !== undefined) {
            queryParameters['timeRange.start.relativeTime.value'] = requestParameters.timeRangeStartRelativeTimeValue;
        }

        if (requestParameters.timeRangeStartAbsoluteTime !== undefined) {
            queryParameters['timeRange.start.absoluteTime'] = requestParameters.timeRangeStartAbsoluteTime;
        }

        if (requestParameters.timeRangeEndRelativeTimeUnit !== undefined) {
            queryParameters['timeRange.end.relativeTime.unit'] = requestParameters.timeRangeEndRelativeTimeUnit;
        }

        if (requestParameters.timeRangeEndRelativeTimeValue !== undefined) {
            queryParameters['timeRange.end.relativeTime.value'] = requestParameters.timeRangeEndRelativeTimeValue;
        }

        if (requestParameters.timeRangeEndAbsoluteTime !== undefined) {
            queryParameters['timeRange.end.absoluteTime'] = requestParameters.timeRangeEndAbsoluteTime;
        }

        if (requestParameters.timeRangeStep !== undefined) {
            queryParameters['timeRange.step'] = requestParameters.timeRangeStep;
        }

        if (requestParameters.timeRangeIntervalValue !== undefined) {
            queryParameters['timeRange.interval.value'] = requestParameters.timeRangeIntervalValue;
        }

        if (requestParameters.timeRangeIntervalUnit !== undefined) {
            queryParameters['timeRange.interval.unit'] = requestParameters.timeRangeIntervalUnit;
        }

        if (requestParameters.timeRangeTimezone !== undefined) {
            queryParameters['timeRange.timezone'] = requestParameters.timeRangeTimezone;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/logs/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceLogQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLog2(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceLogQueryResponse> {
        const response = await this.queryLog2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogMetricsRaw(requestParameters: QueryLogMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceMetricsQueryResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling queryLogMetrics.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling queryLogMetrics.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling queryLogMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/logs/{owner}/{slug}/metrics`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryLogRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceMetricsQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLogMetrics(requestParameters: QueryLogMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceMetricsQueryResponse> {
        const response = await this.queryLogMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogMetrics2Raw(requestParameters: QueryLogMetrics2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceMetricsQueryResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling queryLogMetrics2.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling queryLogMetrics2.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.timeRangeStartRelativeTimeUnit !== undefined) {
            queryParameters['timeRange.start.relativeTime.unit'] = requestParameters.timeRangeStartRelativeTimeUnit;
        }

        if (requestParameters.timeRangeStartRelativeTimeValue !== undefined) {
            queryParameters['timeRange.start.relativeTime.value'] = requestParameters.timeRangeStartRelativeTimeValue;
        }

        if (requestParameters.timeRangeStartAbsoluteTime !== undefined) {
            queryParameters['timeRange.start.absoluteTime'] = requestParameters.timeRangeStartAbsoluteTime;
        }

        if (requestParameters.timeRangeEndRelativeTimeUnit !== undefined) {
            queryParameters['timeRange.end.relativeTime.unit'] = requestParameters.timeRangeEndRelativeTimeUnit;
        }

        if (requestParameters.timeRangeEndRelativeTimeValue !== undefined) {
            queryParameters['timeRange.end.relativeTime.value'] = requestParameters.timeRangeEndRelativeTimeValue;
        }

        if (requestParameters.timeRangeEndAbsoluteTime !== undefined) {
            queryParameters['timeRange.end.absoluteTime'] = requestParameters.timeRangeEndAbsoluteTime;
        }

        if (requestParameters.timeRangeStep !== undefined) {
            queryParameters['timeRange.step'] = requestParameters.timeRangeStep;
        }

        if (requestParameters.timeRangeIntervalValue !== undefined) {
            queryParameters['timeRange.interval.value'] = requestParameters.timeRangeIntervalValue;
        }

        if (requestParameters.timeRangeIntervalUnit !== undefined) {
            queryParameters['timeRange.interval.unit'] = requestParameters.timeRangeIntervalUnit;
        }

        if (requestParameters.timeRangeTimezone !== undefined) {
            queryParameters['timeRange.timezone'] = requestParameters.timeRangeTimezone;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/logs/{owner}/{slug}/metrics`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceMetricsQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLogMetrics2(requestParameters: QueryLogMetrics2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceMetricsQueryResponse> {
        const response = await this.queryLogMetrics2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryRangeRaw(requestParameters: QueryRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceMetricsQueryResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling queryRange.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling queryRange.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling queryRange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query_range`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryRangeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceMetricsQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryRange(requestParameters: QueryRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceMetricsQueryResponse> {
        const response = await this.queryRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
