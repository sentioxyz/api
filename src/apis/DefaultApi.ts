/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GoogleApiHttpBody,
} from '../models/index.js';
import {
    GoogleApiHttpBodyFromJSON,
    GoogleApiHttpBodyToJSON,
} from '../models/index.js';

export interface GetForkStateRequest {
    projectOwner: string;
    projectSlug: string;
    id: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {     };
     */
    async getForkStateRaw(requestParameters: GetForkStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['projectOwner'] == null) {
            throw new runtime.RequiredError(
                'projectOwner',
                'Required parameter "projectOwner" was null or undefined when calling getForkState().'
            );
        }

        if (requestParameters['projectSlug'] == null) {
            throw new runtime.RequiredError(
                'projectSlug',
                'Required parameter "projectSlug" was null or undefined when calling getForkState().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getForkState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{projectOwner}/{projectSlug}/fork/{id}/state`.replace(`{${"projectOwner"}}`, encodeURIComponent(String(requestParameters['projectOwner']))).replace(`{${"projectSlug"}}`, encodeURIComponent(String(requestParameters['projectSlug']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     * option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {     };
     */
    async getForkState(requestParameters: GetForkStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getForkStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
