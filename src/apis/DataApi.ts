/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticServiceAnalyticServiceExecuteSQLBody,
  AnalyticServiceLogQueryResponse,
  AnalyticServiceQueryLogMetricsResponse,
  AnalyticServiceSearchServiceQueryLogBody,
  AnalyticServiceSearchServiceQueryLogMetricsBody,
  AnalyticServiceSyncExecuteSQLRequest,
  AnalyticServiceSyncExecuteSQLResponse,
  MetricsServiceMetricsQueryResponse,
  MetricsServiceObservabilityServiceQueryBody,
  MetricsServiceObservabilityServiceQueryRangeBody,
  MetricsServiceQueryValueResponse,
} from '../models/index';
import {
    AnalyticServiceAnalyticServiceExecuteSQLBodyFromJSON,
    AnalyticServiceAnalyticServiceExecuteSQLBodyToJSON,
    AnalyticServiceLogQueryResponseFromJSON,
    AnalyticServiceLogQueryResponseToJSON,
    AnalyticServiceQueryLogMetricsResponseFromJSON,
    AnalyticServiceQueryLogMetricsResponseToJSON,
    AnalyticServiceSearchServiceQueryLogBodyFromJSON,
    AnalyticServiceSearchServiceQueryLogBodyToJSON,
    AnalyticServiceSearchServiceQueryLogMetricsBodyFromJSON,
    AnalyticServiceSearchServiceQueryLogMetricsBodyToJSON,
    AnalyticServiceSyncExecuteSQLRequestFromJSON,
    AnalyticServiceSyncExecuteSQLRequestToJSON,
    AnalyticServiceSyncExecuteSQLResponseFromJSON,
    AnalyticServiceSyncExecuteSQLResponseToJSON,
    MetricsServiceMetricsQueryResponseFromJSON,
    MetricsServiceMetricsQueryResponseToJSON,
    MetricsServiceObservabilityServiceQueryBodyFromJSON,
    MetricsServiceObservabilityServiceQueryBodyToJSON,
    MetricsServiceObservabilityServiceQueryRangeBodyFromJSON,
    MetricsServiceObservabilityServiceQueryRangeBodyToJSON,
    MetricsServiceQueryValueResponseFromJSON,
    MetricsServiceQueryValueResponseToJSON,
} from '../models/index';

export interface ExecuteSQLRequest {
    owner: string;
    slug: string;
    body: AnalyticServiceAnalyticServiceExecuteSQLBody;
}

export interface ExecuteSQL2Request {
    body: AnalyticServiceSyncExecuteSQLRequest;
}

export interface ObservabilityServiceQueryRequest {
    owner: string;
    slug: string;
    body: MetricsServiceObservabilityServiceQueryBody;
}

export interface ObservabilityServiceQueryRangeRequest {
    owner: string;
    slug: string;
    body: MetricsServiceObservabilityServiceQueryRangeBody;
}

export interface QueryLogRequest {
    owner: string;
    slug: string;
    body: AnalyticServiceSearchServiceQueryLogBody;
}

export interface QueryLog2Request {
    owner: string;
    slug: string;
    projectId?: string;
    query?: string;
    timeRangeStartRelativeTimeUnit?: string;
    timeRangeStartRelativeTimeValue?: number;
    timeRangeStartRelativeTimeAlign?: string;
    timeRangeStartAbsoluteTime?: string;
    timeRangeEndRelativeTimeUnit?: string;
    timeRangeEndRelativeTimeValue?: number;
    timeRangeEndRelativeTimeAlign?: string;
    timeRangeEndAbsoluteTime?: string;
    timeRangeStep?: string;
    timeRangeIntervalValue?: number;
    timeRangeIntervalUnit?: string;
    timeRangeTimezone?: string;
    limit?: number;
    offset?: number;
    version?: number;
}

export interface QueryLogMetricsRequest {
    owner: string;
    slug: string;
    body: AnalyticServiceSearchServiceQueryLogMetricsBody;
}

export interface QueryLogMetrics2Request {
    owner: string;
    slug: string;
    projectId?: string;
    query?: string;
    timeRangeStartRelativeTimeUnit?: string;
    timeRangeStartRelativeTimeValue?: number;
    timeRangeStartRelativeTimeAlign?: string;
    timeRangeStartAbsoluteTime?: string;
    timeRangeEndRelativeTimeUnit?: string;
    timeRangeEndRelativeTimeValue?: number;
    timeRangeEndRelativeTimeAlign?: string;
    timeRangeEndAbsoluteTime?: string;
    timeRangeStep?: string;
    timeRangeIntervalValue?: number;
    timeRangeIntervalUnit?: string;
    timeRangeTimezone?: string;
    limit?: number;
    offset?: number;
    version?: number;
}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI {

    /**
     * Execute SQL in a project
     */
    async executeSQLRaw(requestParameters: ExecuteSQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceSyncExecuteSQLResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling executeSQL().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling executeSQL().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling executeSQL().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/analytics/{owner}/{slug}/sql/execute`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceAnalyticServiceExecuteSQLBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceSyncExecuteSQLResponseFromJSON(jsonValue));
    }

    /**
     * Execute SQL in a project
     */
    async executeSQL(requestParameters: ExecuteSQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceSyncExecuteSQLResponse> {
        const response = await this.executeSQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute SQL in a project
     */
    async executeSQL2Raw(requestParameters: ExecuteSQL2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceSyncExecuteSQLResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling executeSQL2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/analytics/sql/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceSyncExecuteSQLRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceSyncExecuteSQLResponseFromJSON(jsonValue));
    }

    /**
     * Execute SQL in a project
     */
    async executeSQL2(requestParameters: ExecuteSQL2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceSyncExecuteSQLResponse> {
        const response = await this.executeSQL2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async observabilityServiceQueryRaw(requestParameters: ObservabilityServiceQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceQueryValueResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling observabilityServiceQuery().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling observabilityServiceQuery().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling observabilityServiceQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricsServiceObservabilityServiceQueryBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceQueryValueResponseFromJSON(jsonValue));
    }

    /**
     */
    async observabilityServiceQuery(requestParameters: ObservabilityServiceQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceQueryValueResponse> {
        const response = await this.observabilityServiceQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run metric queries in a project
     */
    async observabilityServiceQueryRangeRaw(requestParameters: ObservabilityServiceQueryRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceMetricsQueryResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling observabilityServiceQueryRange().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling observabilityServiceQueryRange().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling observabilityServiceQueryRange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query_range`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricsServiceObservabilityServiceQueryRangeBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceMetricsQueryResponseFromJSON(jsonValue));
    }

    /**
     * Run metric queries in a project
     */
    async observabilityServiceQueryRange(requestParameters: ObservabilityServiceQueryRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceMetricsQueryResponse> {
        const response = await this.observabilityServiceQueryRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogRaw(requestParameters: QueryLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceLogQueryResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling queryLog().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling queryLog().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling queryLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceSearchServiceQueryLogBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceLogQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLog(requestParameters: QueryLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceLogQueryResponse> {
        const response = await this.queryLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLog2Raw(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceLogQueryResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling queryLog2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling queryLog2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['timeRangeStartRelativeTimeUnit'] != null) {
            queryParameters['timeRange.start.relativeTime.unit'] = requestParameters['timeRangeStartRelativeTimeUnit'];
        }

        if (requestParameters['timeRangeStartRelativeTimeValue'] != null) {
            queryParameters['timeRange.start.relativeTime.value'] = requestParameters['timeRangeStartRelativeTimeValue'];
        }

        if (requestParameters['timeRangeStartRelativeTimeAlign'] != null) {
            queryParameters['timeRange.start.relativeTime.align'] = requestParameters['timeRangeStartRelativeTimeAlign'];
        }

        if (requestParameters['timeRangeStartAbsoluteTime'] != null) {
            queryParameters['timeRange.start.absoluteTime'] = requestParameters['timeRangeStartAbsoluteTime'];
        }

        if (requestParameters['timeRangeEndRelativeTimeUnit'] != null) {
            queryParameters['timeRange.end.relativeTime.unit'] = requestParameters['timeRangeEndRelativeTimeUnit'];
        }

        if (requestParameters['timeRangeEndRelativeTimeValue'] != null) {
            queryParameters['timeRange.end.relativeTime.value'] = requestParameters['timeRangeEndRelativeTimeValue'];
        }

        if (requestParameters['timeRangeEndRelativeTimeAlign'] != null) {
            queryParameters['timeRange.end.relativeTime.align'] = requestParameters['timeRangeEndRelativeTimeAlign'];
        }

        if (requestParameters['timeRangeEndAbsoluteTime'] != null) {
            queryParameters['timeRange.end.absoluteTime'] = requestParameters['timeRangeEndAbsoluteTime'];
        }

        if (requestParameters['timeRangeStep'] != null) {
            queryParameters['timeRange.step'] = requestParameters['timeRangeStep'];
        }

        if (requestParameters['timeRangeIntervalValue'] != null) {
            queryParameters['timeRange.interval.value'] = requestParameters['timeRangeIntervalValue'];
        }

        if (requestParameters['timeRangeIntervalUnit'] != null) {
            queryParameters['timeRange.interval.unit'] = requestParameters['timeRangeIntervalUnit'];
        }

        if (requestParameters['timeRangeTimezone'] != null) {
            queryParameters['timeRange.timezone'] = requestParameters['timeRangeTimezone'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceLogQueryResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLog2(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceLogQueryResponse> {
        const response = await this.queryLog2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogMetricsRaw(requestParameters: QueryLogMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceQueryLogMetricsResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling queryLogMetrics().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling queryLogMetrics().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling queryLogMetrics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}/metrics`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceSearchServiceQueryLogMetricsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceQueryLogMetricsResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLogMetrics(requestParameters: QueryLogMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceQueryLogMetricsResponse> {
        const response = await this.queryLogMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queryLogMetrics2Raw(requestParameters: QueryLogMetrics2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceQueryLogMetricsResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling queryLogMetrics2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling queryLogMetrics2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['timeRangeStartRelativeTimeUnit'] != null) {
            queryParameters['timeRange.start.relativeTime.unit'] = requestParameters['timeRangeStartRelativeTimeUnit'];
        }

        if (requestParameters['timeRangeStartRelativeTimeValue'] != null) {
            queryParameters['timeRange.start.relativeTime.value'] = requestParameters['timeRangeStartRelativeTimeValue'];
        }

        if (requestParameters['timeRangeStartRelativeTimeAlign'] != null) {
            queryParameters['timeRange.start.relativeTime.align'] = requestParameters['timeRangeStartRelativeTimeAlign'];
        }

        if (requestParameters['timeRangeStartAbsoluteTime'] != null) {
            queryParameters['timeRange.start.absoluteTime'] = requestParameters['timeRangeStartAbsoluteTime'];
        }

        if (requestParameters['timeRangeEndRelativeTimeUnit'] != null) {
            queryParameters['timeRange.end.relativeTime.unit'] = requestParameters['timeRangeEndRelativeTimeUnit'];
        }

        if (requestParameters['timeRangeEndRelativeTimeValue'] != null) {
            queryParameters['timeRange.end.relativeTime.value'] = requestParameters['timeRangeEndRelativeTimeValue'];
        }

        if (requestParameters['timeRangeEndRelativeTimeAlign'] != null) {
            queryParameters['timeRange.end.relativeTime.align'] = requestParameters['timeRangeEndRelativeTimeAlign'];
        }

        if (requestParameters['timeRangeEndAbsoluteTime'] != null) {
            queryParameters['timeRange.end.absoluteTime'] = requestParameters['timeRangeEndAbsoluteTime'];
        }

        if (requestParameters['timeRangeStep'] != null) {
            queryParameters['timeRange.step'] = requestParameters['timeRangeStep'];
        }

        if (requestParameters['timeRangeIntervalValue'] != null) {
            queryParameters['timeRange.interval.value'] = requestParameters['timeRangeIntervalValue'];
        }

        if (requestParameters['timeRangeIntervalUnit'] != null) {
            queryParameters['timeRange.interval.unit'] = requestParameters['timeRangeIntervalUnit'];
        }

        if (requestParameters['timeRangeTimezone'] != null) {
            queryParameters['timeRange.timezone'] = requestParameters['timeRangeTimezone'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = await this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}/metrics`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceQueryLogMetricsResponseFromJSON(jsonValue));
    }

    /**
     */
    async queryLogMetrics2(requestParameters: QueryLogMetrics2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceQueryLogMetricsResponse> {
        const response = await this.queryLogMetrics2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
