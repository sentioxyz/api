/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GoogleApiHttpBody,
  SolidityServiceGetSimulationBundleResponse,
  SolidityServiceGetSimulationResponse,
  SolidityServiceGetSimulationsResponse,
  SolidityServiceSimulateTransactionBundleResponse,
  SolidityServiceSimulateTransactionResponse,
  SolidityServiceSolidityAPIServiceSimulateTransactionBody,
  SolidityServiceSolidityAPIServiceSimulateTransactionBundleBody,
  SolidityServiceSolidityAPIServiceSimulateTransactionBundleByForkBody,
  SolidityServiceSolidityAPIServiceSimulateTransactionByForkBody,
  TxindexEvmSearchTransactionsResponse,
} from '../models/index.js';
import {
    GoogleApiHttpBodyFromJSON,
    GoogleApiHttpBodyToJSON,
    SolidityServiceGetSimulationBundleResponseFromJSON,
    SolidityServiceGetSimulationBundleResponseToJSON,
    SolidityServiceGetSimulationResponseFromJSON,
    SolidityServiceGetSimulationResponseToJSON,
    SolidityServiceGetSimulationsResponseFromJSON,
    SolidityServiceGetSimulationsResponseToJSON,
    SolidityServiceSimulateTransactionBundleResponseFromJSON,
    SolidityServiceSimulateTransactionBundleResponseToJSON,
    SolidityServiceSimulateTransactionResponseFromJSON,
    SolidityServiceSimulateTransactionResponseToJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBodyFromJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBodyToJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBundleBodyFromJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBundleBodyToJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBundleByForkBodyFromJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionBundleByForkBodyToJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionByForkBodyFromJSON,
    SolidityServiceSolidityAPIServiceSimulateTransactionByForkBodyToJSON,
    TxindexEvmSearchTransactionsResponseFromJSON,
    TxindexEvmSearchTransactionsResponseToJSON,
} from '../models/index.js';

export interface GetCallTraceByBundleRequest {
    owner: string;
    slug: string;
    chainId: string;
    bundleId: string;
    chainSpecForkId?: string;
    txIdTxHash?: string;
    txIdSimulationId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetCallTraceByForkBundleRequest {
    owner: string;
    slug: string;
    forkId: string;
    bundleId: string;
    chainSpecChainId?: string;
    txIdTxHash?: string;
    txIdSimulationId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetCallTraceByForkSimulationRequest {
    owner: string;
    slug: string;
    forkId: string;
    simulationId: string;
    chainSpecChainId?: string;
    txIdTxHash?: string;
    txIdBundleId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetCallTraceByForkTransactionRequest {
    owner: string;
    slug: string;
    forkId: string;
    txHash: string;
    chainSpecChainId?: string;
    txIdSimulationId?: string;
    txIdBundleId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetCallTraceBySimulationRequest {
    owner: string;
    slug: string;
    chainId: string;
    simulationId: string;
    chainSpecForkId?: string;
    txIdTxHash?: string;
    txIdBundleId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetCallTraceByTransactionRequest {
    owner: string;
    slug: string;
    chainId: string;
    txHash: string;
    chainSpecForkId?: string;
    txIdSimulationId?: string;
    txIdBundleId?: string;
    withInternalCalls?: boolean;
    disableOptimizer?: boolean;
    ignoreGasCost?: boolean;
}

export interface GetSimulationRequest {
    owner: string;
    slug: string;
    simulationId: string;
}

export interface GetSimulationBundleInProjectRequest {
    owner: string;
    slug: string;
    bundleId: string;
}

export interface GetSimulationsRequest {
    owner: string;
    slug: string;
    labelContains?: string;
    page?: number;
    pageSize?: number;
}

export interface SearchTransactionsRequest {
    owner: string;
    slug: string;
    chainId?: Array<string>;
    address?: Array<string>;
    includeDirect?: boolean;
    includeTrace?: boolean;
    includeIn?: boolean;
    includeOut?: boolean;
    startBlock?: string;
    endBlock?: string;
    startTimestamp?: string;
    endTimestamp?: string;
    transactionStatus?: Array<number>;
    methodSignature?: string;
    limit?: number;
    pageToken?: string;
}

export interface SimulateTransactionRequest {
    owner: string;
    slug: string;
    chainId: string;
    body: SolidityServiceSolidityAPIServiceSimulateTransactionBody;
}

export interface SimulateTransactionBundleRequest {
    owner: string;
    slug: string;
    chainId: string;
    body: SolidityServiceSolidityAPIServiceSimulateTransactionBundleBody;
}

export interface SimulateTransactionBundleByForkRequest {
    owner: string;
    slug: string;
    forkId: string;
    body: SolidityServiceSolidityAPIServiceSimulateTransactionBundleByForkBody;
}

export interface SimulateTransactionByForkRequest {
    owner: string;
    slug: string;
    forkId: string;
    body: SolidityServiceSolidityAPIServiceSimulateTransactionByForkBody;
}

/**
 * 
 */
export class DebugAndSimulationApi extends runtime.BaseAPI {

    /**
     */
    async getCallTraceByBundleRaw(requestParameters: GetCallTraceByBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceByBundle().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceByBundle().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling getCallTraceByBundle().'
            );
        }

        if (requestParameters['bundleId'] == null) {
            throw new runtime.RequiredError(
                'bundleId',
                'Required parameter "bundleId" was null or undefined when calling getCallTraceByBundle().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecForkId'] != null) {
            queryParameters['chainSpec.forkId'] = requestParameters['chainSpecForkId'];
        }

        if (requestParameters['txIdTxHash'] != null) {
            queryParameters['txId.txHash'] = requestParameters['txIdTxHash'];
        }

        if (requestParameters['txIdSimulationId'] != null) {
            queryParameters['txId.simulationId'] = requestParameters['txIdSimulationId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/{chain_id}/bundle/{bundle_id}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"chain_id"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"bundle_id"}}`, encodeURIComponent(String(requestParameters['bundleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     */
    async getCallTraceByBundle(requestParameters: GetCallTraceByBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceByBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCallTraceByForkBundleRaw(requestParameters: GetCallTraceByForkBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceByForkBundle().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceByForkBundle().'
            );
        }

        if (requestParameters['forkId'] == null) {
            throw new runtime.RequiredError(
                'forkId',
                'Required parameter "forkId" was null or undefined when calling getCallTraceByForkBundle().'
            );
        }

        if (requestParameters['bundleId'] == null) {
            throw new runtime.RequiredError(
                'bundleId',
                'Required parameter "bundleId" was null or undefined when calling getCallTraceByForkBundle().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecChainId'] != null) {
            queryParameters['chainSpec.chainId'] = requestParameters['chainSpecChainId'];
        }

        if (requestParameters['txIdTxHash'] != null) {
            queryParameters['txId.txHash'] = requestParameters['txIdTxHash'];
        }

        if (requestParameters['txIdSimulationId'] != null) {
            queryParameters['txId.simulationId'] = requestParameters['txIdSimulationId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/fork/{fork_id}/bundle/{bundle_id}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"fork_id"}}`, encodeURIComponent(String(requestParameters['forkId']))).replace(`{${"bundle_id"}}`, encodeURIComponent(String(requestParameters['bundleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     */
    async getCallTraceByForkBundle(requestParameters: GetCallTraceByForkBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceByForkBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCallTraceByForkSimulationRaw(requestParameters: GetCallTraceByForkSimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceByForkSimulation().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceByForkSimulation().'
            );
        }

        if (requestParameters['forkId'] == null) {
            throw new runtime.RequiredError(
                'forkId',
                'Required parameter "forkId" was null or undefined when calling getCallTraceByForkSimulation().'
            );
        }

        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCallTraceByForkSimulation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecChainId'] != null) {
            queryParameters['chainSpec.chainId'] = requestParameters['chainSpecChainId'];
        }

        if (requestParameters['txIdTxHash'] != null) {
            queryParameters['txId.txHash'] = requestParameters['txIdTxHash'];
        }

        if (requestParameters['txIdBundleId'] != null) {
            queryParameters['txId.bundleId'] = requestParameters['txIdBundleId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/fork/{fork_id}/simulation/{simulation_id}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"fork_id"}}`, encodeURIComponent(String(requestParameters['forkId']))).replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     */
    async getCallTraceByForkSimulation(requestParameters: GetCallTraceByForkSimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceByForkSimulationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCallTraceByForkTransactionRaw(requestParameters: GetCallTraceByForkTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceByForkTransaction().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceByForkTransaction().'
            );
        }

        if (requestParameters['forkId'] == null) {
            throw new runtime.RequiredError(
                'forkId',
                'Required parameter "forkId" was null or undefined when calling getCallTraceByForkTransaction().'
            );
        }

        if (requestParameters['txHash'] == null) {
            throw new runtime.RequiredError(
                'txHash',
                'Required parameter "txHash" was null or undefined when calling getCallTraceByForkTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecChainId'] != null) {
            queryParameters['chainSpec.chainId'] = requestParameters['chainSpecChainId'];
        }

        if (requestParameters['txIdSimulationId'] != null) {
            queryParameters['txId.simulationId'] = requestParameters['txIdSimulationId'];
        }

        if (requestParameters['txIdBundleId'] != null) {
            queryParameters['txId.bundleId'] = requestParameters['txIdBundleId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/fork/{fork_id}/transaction/{tx_hash}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"fork_id"}}`, encodeURIComponent(String(requestParameters['forkId']))).replace(`{${"tx_hash"}}`, encodeURIComponent(String(requestParameters['txHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     */
    async getCallTraceByForkTransaction(requestParameters: GetCallTraceByForkTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceByForkTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCallTraceBySimulationRaw(requestParameters: GetCallTraceBySimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceBySimulation().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceBySimulation().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling getCallTraceBySimulation().'
            );
        }

        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getCallTraceBySimulation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecForkId'] != null) {
            queryParameters['chainSpec.forkId'] = requestParameters['chainSpecForkId'];
        }

        if (requestParameters['txIdTxHash'] != null) {
            queryParameters['txId.txHash'] = requestParameters['txIdTxHash'];
        }

        if (requestParameters['txIdBundleId'] != null) {
            queryParameters['txId.bundleId'] = requestParameters['txIdBundleId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/{chain_id}/simulation/{simulation_id}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"chain_id"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"simulation_id"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     */
    async getCallTraceBySimulation(requestParameters: GetCallTraceBySimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceBySimulationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API to get Sentio call trace. It takes `txId.txHash` and `chainSpec.chainId` arguments, where the first is transaction hash, and the second is the numeric ethereum chain ID.  The results looks very similar to the normal [Ethereum call trace](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(2)%20(1)%20(1)%20(1).png). But we have an additional `startIndex` and `startIndex` on each trace entry even for the LOG, representing the execution order in the trace.  This allows you to build chart that marks the order of fund flow.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(2)%20(1)%20(1)%20(1).png)
     * Get indexed call trace
     */
    async getCallTraceByTransactionRaw(requestParameters: GetCallTraceByTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleApiHttpBody>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getCallTraceByTransaction().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCallTraceByTransaction().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling getCallTraceByTransaction().'
            );
        }

        if (requestParameters['txHash'] == null) {
            throw new runtime.RequiredError(
                'txHash',
                'Required parameter "txHash" was null or undefined when calling getCallTraceByTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainSpecForkId'] != null) {
            queryParameters['chainSpec.forkId'] = requestParameters['chainSpecForkId'];
        }

        if (requestParameters['txIdSimulationId'] != null) {
            queryParameters['txId.simulationId'] = requestParameters['txIdSimulationId'];
        }

        if (requestParameters['txIdBundleId'] != null) {
            queryParameters['txId.bundleId'] = requestParameters['txIdBundleId'];
        }

        if (requestParameters['withInternalCalls'] != null) {
            queryParameters['withInternalCalls'] = requestParameters['withInternalCalls'];
        }

        if (requestParameters['disableOptimizer'] != null) {
            queryParameters['disableOptimizer'] = requestParameters['disableOptimizer'];
        }

        if (requestParameters['ignoreGasCost'] != null) {
            queryParameters['ignoreGasCost'] = requestParameters['ignoreGasCost'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/{chain_id}/transaction/{tx_hash}/call_trace`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"chain_id"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"tx_hash"}}`, encodeURIComponent(String(requestParameters['txHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleApiHttpBodyFromJSON(jsonValue));
    }

    /**
     * API to get Sentio call trace. It takes `txId.txHash` and `chainSpec.chainId` arguments, where the first is transaction hash, and the second is the numeric ethereum chain ID.  The results looks very similar to the normal [Ethereum call trace](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(2)%20(1)%20(1)%20(1).png). But we have an additional `startIndex` and `startIndex` on each trace entry even for the LOG, representing the execution order in the trace.  This allows you to build chart that marks the order of fund flow.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(2)%20(1)%20(1)%20(1).png)
     * Get indexed call trace
     */
    async getCallTraceByTransaction(requestParameters: GetCallTraceByTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleApiHttpBody> {
        const response = await this.getCallTraceByTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a simulation by id
     */
    async getSimulationRaw(requestParameters: GetSimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceGetSimulationResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getSimulation().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getSimulation().'
            );
        }

        if (requestParameters['simulationId'] == null) {
            throw new runtime.RequiredError(
                'simulationId',
                'Required parameter "simulationId" was null or undefined when calling getSimulation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/simulation/{simulationId}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"simulationId"}}`, encodeURIComponent(String(requestParameters['simulationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceGetSimulationResponseFromJSON(jsonValue));
    }

    /**
     * Get a simulation by id
     */
    async getSimulation(requestParameters: GetSimulationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceGetSimulationResponse> {
        const response = await this.getSimulationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a bundle simulation by id
     */
    async getSimulationBundleInProjectRaw(requestParameters: GetSimulationBundleInProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceGetSimulationBundleResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getSimulationBundleInProject().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getSimulationBundleInProject().'
            );
        }

        if (requestParameters['bundleId'] == null) {
            throw new runtime.RequiredError(
                'bundleId',
                'Required parameter "bundleId" was null or undefined when calling getSimulationBundleInProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/simulation_bundle/{bundleId}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"bundleId"}}`, encodeURIComponent(String(requestParameters['bundleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceGetSimulationBundleResponseFromJSON(jsonValue));
    }

    /**
     * Get a bundle simulation by id
     */
    async getSimulationBundleInProject(requestParameters: GetSimulationBundleInProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceGetSimulationBundleResponse> {
        const response = await this.getSimulationBundleInProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get existing transaction simulations
     */
    async getSimulationsRaw(requestParameters: GetSimulationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceGetSimulationsResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getSimulations().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getSimulations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['labelContains'] != null) {
            queryParameters['labelContains'] = requestParameters['labelContains'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/simulation`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceGetSimulationsResponseFromJSON(jsonValue));
    }

    /**
     * Get existing transaction simulations
     */
    async getSimulations(requestParameters: GetSimulationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceGetSimulationsResponse> {
        const response = await this.getSimulationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for transactions
     */
    async searchTransactionsRaw(requestParameters: SearchTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TxindexEvmSearchTransactionsResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling searchTransactions().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling searchTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        if (requestParameters['includeDirect'] != null) {
            queryParameters['includeDirect'] = requestParameters['includeDirect'];
        }

        if (requestParameters['includeTrace'] != null) {
            queryParameters['includeTrace'] = requestParameters['includeTrace'];
        }

        if (requestParameters['includeIn'] != null) {
            queryParameters['includeIn'] = requestParameters['includeIn'];
        }

        if (requestParameters['includeOut'] != null) {
            queryParameters['includeOut'] = requestParameters['includeOut'];
        }

        if (requestParameters['startBlock'] != null) {
            queryParameters['startBlock'] = requestParameters['startBlock'];
        }

        if (requestParameters['endBlock'] != null) {
            queryParameters['endBlock'] = requestParameters['endBlock'];
        }

        if (requestParameters['startTimestamp'] != null) {
            queryParameters['startTimestamp'] = requestParameters['startTimestamp'];
        }

        if (requestParameters['endTimestamp'] != null) {
            queryParameters['endTimestamp'] = requestParameters['endTimestamp'];
        }

        if (requestParameters['transactionStatus'] != null) {
            queryParameters['transactionStatus'] = requestParameters['transactionStatus'];
        }

        if (requestParameters['methodSignature'] != null) {
            queryParameters['methodSignature'] = requestParameters['methodSignature'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['pageToken'] = requestParameters['pageToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/search_transactions`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TxindexEvmSearchTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * Search for transactions
     */
    async searchTransactions(requestParameters: SearchTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TxindexEvmSearchTransactionsResponse> {
        const response = await this.searchTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new transaction simulation. The simulation body should be included in the request body. Your simulations will be saved, and a unique ID for each simulation is included in the response. It will be useful for fetching simulation details.
     * Single simulation
     */
    async simulateTransactionRaw(requestParameters: SimulateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceSimulateTransactionResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling simulateTransaction().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling simulateTransaction().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling simulateTransaction().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling simulateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/{chain_id}/simulation`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"chain_id"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolidityServiceSolidityAPIServiceSimulateTransactionBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceSimulateTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new transaction simulation. The simulation body should be included in the request body. Your simulations will be saved, and a unique ID for each simulation is included in the response. It will be useful for fetching simulation details.
     * Single simulation
     */
    async simulateTransaction(requestParameters: SimulateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceSimulateTransactionResponse> {
        const response = await this.simulateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You could also create bundle simulations so that one transaction could be executed one after another. For `blockNumber` `transactionIndex` `networkId` `stateOverrides` and `blockOverrides` fields, only the first simulation takes effect.
     * Bundle simulation
     */
    async simulateTransactionBundleRaw(requestParameters: SimulateTransactionBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceSimulateTransactionBundleResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling simulateTransactionBundle().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling simulateTransactionBundle().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling simulateTransactionBundle().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling simulateTransactionBundle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/{chain_id}/simulation_bundle`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"chain_id"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolidityServiceSolidityAPIServiceSimulateTransactionBundleBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceSimulateTransactionBundleResponseFromJSON(jsonValue));
    }

    /**
     * You could also create bundle simulations so that one transaction could be executed one after another. For `blockNumber` `transactionIndex` `networkId` `stateOverrides` and `blockOverrides` fields, only the first simulation takes effect.
     * Bundle simulation
     */
    async simulateTransactionBundle(requestParameters: SimulateTransactionBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceSimulateTransactionBundleResponse> {
        const response = await this.simulateTransactionBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async simulateTransactionBundleByForkRaw(requestParameters: SimulateTransactionBundleByForkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceSimulateTransactionBundleResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling simulateTransactionBundleByFork().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling simulateTransactionBundleByFork().'
            );
        }

        if (requestParameters['forkId'] == null) {
            throw new runtime.RequiredError(
                'forkId',
                'Required parameter "forkId" was null or undefined when calling simulateTransactionBundleByFork().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling simulateTransactionBundleByFork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/fork/{fork_id}/simulation_bundle`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"fork_id"}}`, encodeURIComponent(String(requestParameters['forkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolidityServiceSolidityAPIServiceSimulateTransactionBundleByForkBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceSimulateTransactionBundleResponseFromJSON(jsonValue));
    }

    /**
     */
    async simulateTransactionBundleByFork(requestParameters: SimulateTransactionBundleByForkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceSimulateTransactionBundleResponse> {
        const response = await this.simulateTransactionBundleByForkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async simulateTransactionByForkRaw(requestParameters: SimulateTransactionByForkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolidityServiceSimulateTransactionResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling simulateTransactionByFork().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling simulateTransactionByFork().'
            );
        }

        if (requestParameters['forkId'] == null) {
            throw new runtime.RequiredError(
                'forkId',
                'Required parameter "forkId" was null or undefined when calling simulateTransactionByFork().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling simulateTransactionByFork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/solidity/{owner}/{slug}/fork/{fork_id}/simulation`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"fork_id"}}`, encodeURIComponent(String(requestParameters['forkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SolidityServiceSolidityAPIServiceSimulateTransactionByForkBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolidityServiceSimulateTransactionResponseFromJSON(jsonValue));
    }

    /**
     */
    async simulateTransactionByFork(requestParameters: SimulateTransactionByForkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolidityServiceSimulateTransactionResponse> {
        const response = await this.simulateTransactionByForkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
