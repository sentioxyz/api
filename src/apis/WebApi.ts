/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  WebServiceDashboard,
  WebServiceExportDashboardResponse,
  WebServiceGetDashboardResponse,
  WebServiceGetProjectListResponse,
  WebServiceGetProjectResponse,
  WebServiceImportDashboardRequest,
  WebServiceImportDashboardResponse,
} from '../models/index.js';
import {
    WebServiceDashboardFromJSON,
    WebServiceDashboardToJSON,
    WebServiceExportDashboardResponseFromJSON,
    WebServiceExportDashboardResponseToJSON,
    WebServiceGetDashboardResponseFromJSON,
    WebServiceGetDashboardResponseToJSON,
    WebServiceGetProjectListResponseFromJSON,
    WebServiceGetProjectListResponseToJSON,
    WebServiceGetProjectResponseFromJSON,
    WebServiceGetProjectResponseToJSON,
    WebServiceImportDashboardRequestFromJSON,
    WebServiceImportDashboardRequestToJSON,
    WebServiceImportDashboardResponseFromJSON,
    WebServiceImportDashboardResponseToJSON,
} from '../models/index.js';

export interface DeleteDashboardRequest {
    dashboardId: string;
    projectId?: string;
    ownerName?: string;
    slug?: string;
}

export interface ExportDashboardRequest {
    dashboardId: string;
}

export interface GetDashboardRequest {
    dashboardId: string;
    projectId?: string;
    ownerName?: string;
    slug?: string;
}

export interface GetDashboard2Request {
    owner: string;
    slug: string;
    dashboardId: string;
    projectId?: string;
}

export interface GetProjectRequest {
    owner: string;
    slug: string;
}

export interface GetProjectListRequest {
    userId?: string;
    organizationId?: string;
}

export interface ImportDashboardRequest {
    body: WebServiceImportDashboardRequest;
}

export interface ListDashboardsRequest {
    dashboardId?: string;
    projectId?: string;
    ownerName?: string;
    slug?: string;
}

export interface ListDashboards2Request {
    owner: string;
    slug: string;
    dashboardId?: string;
    projectId?: string;
}

/**
 * 
 */
export class WebApi extends runtime.BaseAPI {

    /**
     * Delete a dashboard by id
     */
    async deleteDashboardRaw(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceDashboard>> {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling deleteDashboard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceDashboardFromJSON(jsonValue));
    }

    /**
     * Delete a dashboard by id
     */
    async deleteDashboard(requestParameters: DeleteDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceDashboard> {
        const response = await this.deleteDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export a dashboard to json
     */
    async exportDashboardRaw(requestParameters: ExportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceExportDashboardResponse>> {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling exportDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}/json`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceExportDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Export a dashboard to json
     */
    async exportDashboard(requestParameters: ExportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceExportDashboardResponse> {
        const response = await this.exportDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a dashboard by id
     */
    async getDashboardRaw(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling getDashboard().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get a dashboard by id
     */
    async getDashboard(requestParameters: GetDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a dashboard by id
     */
    async getDashboard2Raw(requestParameters: GetDashboard2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getDashboard2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getDashboard2().'
            );
        }

        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError(
                'dashboardId',
                'Required parameter "dashboardId" was null or undefined when calling getDashboard2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{owner}/{slug}/dashboards/{dashboardId}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get a dashboard by id
     */
    async getDashboard2(requestParameters: GetDashboard2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.getDashboard2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project details
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetProjectResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling getProject().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/project/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get project details
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetProjectResponse> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project list
     */
    async getProjectListRaw(requestParameters: GetProjectListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetProjectListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetProjectListResponseFromJSON(jsonValue));
    }

    /**
     * Get project list
     */
    async getProjectList(requestParameters: GetProjectListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetProjectListResponse> {
        const response = await this.getProjectListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import a dashboard to another dashboard
     */
    async importDashboardRaw(requestParameters: ImportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceImportDashboardResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling importDashboard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards/json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebServiceImportDashboardRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceImportDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Import a dashboard to another dashboard
     */
    async importDashboard(requestParameters: ImportDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceImportDashboardResponse> {
        const response = await this.importDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all dashboards in a project
     */
    async listDashboardsRaw(requestParameters: ListDashboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        const queryParameters: any = {};

        if (requestParameters['dashboardId'] != null) {
            queryParameters['dashboardId'] = requestParameters['dashboardId'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/dashboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * List all dashboards in a project
     */
    async listDashboards(requestParameters: ListDashboardsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.listDashboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all dashboards in a project
     */
    async listDashboards2Raw(requestParameters: ListDashboards2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebServiceGetDashboardResponse>> {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError(
                'owner',
                'Required parameter "owner" was null or undefined when calling listDashboards2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling listDashboards2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dashboardId'] != null) {
            queryParameters['dashboardId'] = requestParameters['dashboardId'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{owner}/{slug}/dashboards`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }

    /**
     * List all dashboards in a project
     */
    async listDashboards2(requestParameters: ListDashboards2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebServiceGetDashboardResponse> {
        const response = await this.listDashboards2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
