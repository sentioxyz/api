// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ai_service, alert_service, analytic_service, web_service, insights_service, metrics_service, price_service, processor_service, common, solidity_service, google, solidit_service } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AiService {
    /**
     * Create Chat Session
     * Initialize a new AI chat session. Returns a session_id that can be used with PostSessionMessage to have a conversation with the AI. Messages are generated as part of runs, with is_final indicating run completion.
     */
    public static createChatSession<ThrowOnError extends boolean = false>(options: Options<ai_service.CreateChatSessionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ai_service.CreateChatSessionResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/ai/chat',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query Chat Session
     * Retrieve information about an existing chat session, returning only messages after the specified cursor position. Messages include run_id to identify generation runs.
     */
    public static queryChatSession<ThrowOnError extends boolean = false>(options: Options<ai_service.QueryChatSessionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ai_service.QueryChatSessionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/ai/chat/{sessionId}',
            ...options
        });
    }
    
    /**
     * Post Session Message
     * Add a new message to an existing chat session. This will trigger AI message generation as a run. check is_final to know when all messages for the run have been generated.
     */
    public static postSessionMessage<ThrowOnError extends boolean = false>(options: Options<ai_service.PostSessionMessageData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ai_service.PostSessionMessageResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/ai/chat/{sessionId}/message',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class AlertsService {
    /**
     * Save an alert rule
     */
    public static saveAlertRule<ThrowOnError extends boolean = false>(options: Options<alert_service.SaveAlertRuleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<alert_service.SaveAlertRuleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * List all alert rules for a project
     */
    public static getAlertRules<ThrowOnError extends boolean = false>(options: Options<alert_service.GetAlertRulesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<alert_service.GetAlertRulesResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/project/{projectId}',
            ...options
        });
    }
    
    /**
     * Delete an alert rule
     */
    public static deleteAlertRule<ThrowOnError extends boolean = false>(options: Options<alert_service.DeleteAlertRuleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<alert_service.DeleteAlertRuleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/{id}',
            ...options
        });
    }
    
    /**
     * Save an alert rule
     */
    public static saveAlertRule2<ThrowOnError extends boolean = false>(options: Options<alert_service.SaveAlertRule2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<alert_service.SaveAlertRule2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Find an alert rule by id, and list all alerts for this rule
     */
    public static getAlert<ThrowOnError extends boolean = false>(options: Options<alert_service.GetAlertData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<alert_service.GetAlertResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/{ruleId}',
            ...options
        });
    }
    
}

export class DataService {
    /**
     * Save Sharing SQL
     * Save or update sharing settings for a SQL query.
     */
    public static saveSharingSql<ThrowOnError extends boolean = false>(options: Options<analytic_service.SaveSharingSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.SaveSharingSqlResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/sql/sharing',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get Sharing SQL
     * Get sharing settings for a SQL query.
     */
    public static getSharingSql<ThrowOnError extends boolean = false>(options: Options<analytic_service.GetSharingSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.GetSharingSqlResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/sql/sharing/{id}',
            ...options
        });
    }
    
    /**
     * Query Tables
     * Query tables in a project. use flag to control which type of tables to include.
     */
    public static queryTables2<ThrowOnError extends boolean = false>(options?: Options<analytic_service.QueryTables2Data, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<analytic_service.QueryTables2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/sql/tables',
            ...options
        });
    }
    
    /**
     * Cancel SQL Query
     * Cancel a SQL query by execution_id.
     */
    public static cancelSqlQuery<ThrowOnError extends boolean = false>(options: Options<analytic_service.CancelSqlQueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<analytic_service.CancelSqlQueryResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/cancel_query/{executionId}',
            ...options
        });
    }
    
    /**
     * Execute SQL
     * Execute SQL in a project. Go to "Data Studio" -> "SQL Editor", write your query and then click "Export as cURL"
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(102).png)
     *
     * Find more: https://docs.sentio.xyz/reference/data#sql-api
     */
    public static executeSql<ThrowOnError extends boolean = false>(options: Options<analytic_service.ExecuteSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.ExecuteSqlResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Execute SQL by Async
     * Execute SQL in a project asynchronously.
     */
    public static executeSqlAsync<ThrowOnError extends boolean = false>(options: Options<analytic_service.ExecuteSqlAsyncData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.ExecuteSqlAsyncResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/execute/async',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query SQL Execution Detail
     * Query the execution detail of a SQL query by execution_id.
     */
    public static querySqlExecutionDetail<ThrowOnError extends boolean = false>(options: Options<analytic_service.QuerySqlExecutionDetailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.QuerySqlExecutionDetailResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/query_execution_detail/{executionId}',
            ...options
        });
    }
    
    /**
     * Query SQL Result
     * Query the result of a SQL query by execution_id.
     */
    public static querySqlResult<ThrowOnError extends boolean = false>(options: Options<analytic_service.QuerySqlResultData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.QuerySqlResultResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/query_result/{executionId}',
            ...options
        });
    }
    
    /**
     * Save Refreshable Materialized View
     * Save or update a refreshable materialized view in a project.
     */
    public static saveRefreshableMaterializedView<ThrowOnError extends boolean = false>(options: Options<analytic_service.SaveRefreshableMaterializedViewData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.SaveRefreshableMaterializedViewResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete Refreshable Materialized View
     * Delete a refreshable materialized view in a project.
     */
    public static deleteRefreshableMaterializedView<ThrowOnError extends boolean = false>(options: Options<analytic_service.DeleteRefreshableMaterializedViewData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<analytic_service.DeleteRefreshableMaterializedViewResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view/{name}',
            ...options
        });
    }
    
    /**
     * Get Refreshable Materialized View Status
     * Get the status of a refreshable materialized view in a project.
     */
    public static getRefreshableMaterializedStatus<ThrowOnError extends boolean = false>(options: Options<analytic_service.GetRefreshableMaterializedStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.GetRefreshableMaterializedStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_view/{name}',
            ...options
        });
    }
    
    /**
     * List Refreshable Materialized Views
     * List all refreshable materialized views in a project.
     */
    public static listRefreshableMaterializedViews<ThrowOnError extends boolean = false>(options: Options<analytic_service.ListRefreshableMaterializedViewsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.ListRefreshableMaterializedViewsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/refreshable_materialized_views',
            ...options
        });
    }
    
    /**
     * Save SQL
     * Save or update a SQL query in a project.
     */
    public static saveSql<ThrowOnError extends boolean = false>(options: Options<analytic_service.SaveSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.SaveSqlResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/save',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Save SQL
     * Save or update a SQL query in a project.
     */
    public static saveSql2<ThrowOnError extends boolean = false>(options: Options<analytic_service.SaveSql2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<analytic_service.SaveSql2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/save',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query Tables
     * Query tables in a project. use flag to control which type of tables to include.
     */
    public static queryTables<ThrowOnError extends boolean = false>(options: Options<analytic_service.QueryTablesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.QueryTablesResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/tables',
            ...options
        });
    }
    
    /**
     * Query event logs
     */
    public static queryLog<ThrowOnError extends boolean = false>(options: Options<analytic_service.QueryLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<analytic_service.QueryLogResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/eventlogs/{owner}/{slug}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query event logs
     */
    public static queryLog2<ThrowOnError extends boolean = false>(options: Options<analytic_service.QueryLog2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<analytic_service.QueryLog2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/eventlogs/{owner}/{slug}/query',
            ...options
        });
    }
    
    /**
     * List coins
     * Get a list of coins in a project.
     */
    public static listCoins2<ThrowOnError extends boolean = false>(options?: Options<insights_service.ListCoins2Data, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<insights_service.ListCoins2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/coins',
            ...options
        });
    }
    
    /**
     * List coins
     * Get a list of coins in a project.
     */
    public static listCoins<ThrowOnError extends boolean = false>(options: Options<insights_service.ListCoinsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<insights_service.ListCoinsResponse3, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/{owner}/{slug}/coins',
            ...options
        });
    }
    
    /**
     * Insight Query
     * Query for metrics,event logs and coin prices in a project.
     */
    public static query<ThrowOnError extends boolean = false>(options: Options<insights_service.QueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<insights_service.QueryResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/{owner}/{slug}/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get a list of metrics in a project
     */
    public static getMetrics<ThrowOnError extends boolean = false>(options?: Options<metrics_service.GetMetricsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<metrics_service.GetMetricsResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics',
            ...options
        });
    }
    
    /**
     * Metric instant queries
     */
    public static queryInstant<ThrowOnError extends boolean = false>(options: Options<metrics_service.QueryInstantData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<metrics_service.QueryInstantResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics/{owner}/{slug}/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Metric range queries
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(101).png)
     */
    public static queryRange<ThrowOnError extends boolean = false>(options: Options<metrics_service.QueryRangeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<metrics_service.QueryRangeResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics/{owner}/{slug}/query_range',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class WebService {
    /**
     * List all dashboards in a project
     */
    public static listDashboards<ThrowOnError extends boolean = false>(options?: Options<web_service.ListDashboardsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<web_service.ListDashboardsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards',
            ...options
        });
    }
    
    /**
     * Import a dashboard to another dashboard
     */
    public static importDashboard<ThrowOnError extends boolean = false>(options: Options<web_service.ImportDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<web_service.ImportDashboardResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/json',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete a dashboard by id
     */
    public static deleteDashboard<ThrowOnError extends boolean = false>(options: Options<web_service.DeleteDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<web_service.DeleteDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}',
            ...options
        });
    }
    
    /**
     * Get a dashboard by id
     */
    public static getDashboard<ThrowOnError extends boolean = false>(options: Options<web_service.GetDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<web_service.GetDashboardResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}',
            ...options
        });
    }
    
    /**
     * Export a dashboard to json
     */
    public static exportDashboard<ThrowOnError extends boolean = false>(options: Options<web_service.ExportDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<web_service.ExportDashboardResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}/json',
            ...options
        });
    }
    
    /**
     * Get project details
     */
    public static getProject<ThrowOnError extends boolean = false>(options: Options<web_service.GetProjectData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<web_service.GetProjectResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/project/{owner}/{slug}',
            ...options
        });
    }
    
    /**
     * Get project details
     */
    public static getProjectById<ThrowOnError extends boolean = false>(options: Options<common.GetProjectByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<common.GetProjectByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/project/{projectId}',
            ...options
        });
    }
    
    /**
     * Get project list
     */
    public static getProjectList<ThrowOnError extends boolean = false>(options?: Options<web_service.GetProjectListData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<web_service.GetProjectListResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects',
            ...options
        });
    }
    
    /**
     * List all dashboards in a project
     */
    public static listDashboards2<ThrowOnError extends boolean = false>(options: Options<web_service.ListDashboards2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<web_service.ListDashboards2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects/{owner}/{slug}/dashboards',
            ...options
        });
    }
    
    /**
     * Get a dashboard by id
     */
    public static getDashboard2<ThrowOnError extends boolean = false>(options: Options<web_service.GetDashboard2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<web_service.GetDashboard2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects/{owner}/{slug}/dashboards/{dashboardId}',
            ...options
        });
    }
    
}

export class PriceService {
    /**
     * Get price
     * GetPrice returns the price of a given coin identifier, in a best effort way.
     * If we do not have any price data for the given coin, we will return NOT_FOUND error.
     * If we have at least one price data for the given coin, we will return it with the actual timestamp.
     * Client is responsible for checking the timestamp and decide whether to use the price or not.
     */
    public static getPrice<ThrowOnError extends boolean = false>(options?: Options<price_service.GetPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<price_service.GetPriceResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices',
            ...options
        });
    }
    
    /**
     * Add coin by Gecko
     * adds a coin by its coingecko id.
     *
     * coingecko id the API ID of the coin in coingecko web page.
     *
     * please AWARE that the coingecko id is NOT the same as the symbol of the coin.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/coingecko_apiid.png)
     */
    public static addCoinByGecko<ThrowOnError extends boolean = false>(options: Options<price_service.AddCoinByGeckoData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<price_service.AddCoinByGeckoResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/add_coin_by_gecko',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Batch get prices
     */
    public static batchGetPrices<ThrowOnError extends boolean = false>(options: Options<price_service.BatchGetPricesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<price_service.BatchGetPricesResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/batch',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Check latest price
     */
    public static checkLatestPrice<ThrowOnError extends boolean = false>(options?: Options<price_service.CheckLatestPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<price_service.CheckLatestPriceResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/check_latest',
            ...options
        });
    }
    
    /**
     * List coins
     */
    public static priceListCoins<ThrowOnError extends boolean = false>(options?: Options<price_service.PriceListCoinsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<price_service.PriceListCoinsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/coins',
            ...options
        });
    }
    
}

export class ProcessorService {
    /**
     * Get processor status
     */
    public static getProcessorStatusV2<ThrowOnError extends boolean = false>(options: Options<processor_service.GetProcessorStatusV2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<processor_service.GetProcessorStatusV2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/processors/{owner}/{slug}/status',
            ...options
        });
    }
    
    public static getProcessorSourceFiles<ThrowOnError extends boolean = false>(options: Options<processor_service.GetProcessorSourceFilesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<processor_service.GetProcessorSourceFilesResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/processors/{processorId}/source_files',
            ...options
        });
    }
    
}

export class DebugAndSimulationService {
    /**
     * Estimate gas price
     */
    public static getEstimatedGasPrice<ThrowOnError extends boolean = false>(options?: Options<solidity_service.GetEstimatedGasPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<solidity_service.GetEstimatedGasPriceResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/estimated_gas_price',
            ...options
        });
    }
    
    /**
     * Search transactions
     */
    public static searchTransactions<ThrowOnError extends boolean = false>(options: Options<solidity_service.SearchTransactionsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.SearchTransactionsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/search_transactions',
            ...options
        });
    }
    
    /**
     * Get list of simulations
     */
    public static getSimulations<ThrowOnError extends boolean = false>(options: Options<solidity_service.GetSimulationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.GetSimulationsResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation',
            ...options
        });
    }
    
    /**
     * Get simulation by ID
     */
    public static getSimulation<ThrowOnError extends boolean = false>(options: Options<solidity_service.GetSimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.GetSimulationResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation/{simulationId}',
            ...options
        });
    }
    
    /**
     * Get bundle simulation by ID
     */
    public static getSimulationBundleInProject<ThrowOnError extends boolean = false>(options: Options<solidity_service.GetSimulationBundleInProjectData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.GetSimulationBundleInProjectResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation_bundle/{bundleId}',
            ...options
        });
    }
    
    /**
     * Get trace by bundle simulation
     */
    public static getCallTraceByBundle<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceByBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceByBundleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/bundle/{bundleId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run simulation
     * Create a new transaction simulation. The simulation body should be included in the request body.
     * Your simulations will be saved, and a unique ID for each simulation is included in the response. It will be useful for fetching simulation details.
     */
    public static simulateTransaction<ThrowOnError extends boolean = false>(options: Options<solidity_service.SimulateTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<solidity_service.SimulateTransactionResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by simulation
     */
    public static getCallTraceBySimulation<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceBySimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceBySimulationResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation/{simulationId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run bundle simulation
     * You could also create bundle simulations so that one transaction could be executed one after another. For `blockNumber` `transactionIndex` `networkId` `stateOverrides` and `blockOverrides` fields, only the first simulation takes effect.
     */
    public static simulateTransactionBundle<ThrowOnError extends boolean = false>(options: Options<solidity_service.SimulateTransactionBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<solidity_service.SimulateTransactionBundleResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation_bundle',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by transaction
     * API to get Sentio call trace. It takes `txId.txHash` and `chainSpec.chainId` arguments, where the first is transaction hash, and the second is the numeric ethereum chain ID.
     *
     * The results looks very similar to the normal [Ethereum call trace](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(2)%20(1)%20(1)%20(1).png). But we have an additional `startIndex` and `startIndex` on each trace entry even for the LOG, representing the execution order in the trace.
     *
     * This allows you to build chart that marks the order of fund flow.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(2)%20(1)%20(1)%20(1).png)
     */
    public static getCallTraceByTransaction<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceByTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceByTransactionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/transaction/{txHash}/call_trace',
            ...options
        });
    }
    
}

export class ForksService {
    /**
     * List all forks
     */
    public static listForks<ThrowOnError extends boolean = false>(options: Options<solidity_service.ListForksData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.ListForksResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork',
            ...options
        });
    }
    
    /**
     * Create a fork
     */
    public static createFork<ThrowOnError extends boolean = false>(options: Options<solidity_service.CreateForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<solidity_service.CreateForkResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by bundle simulation
     */
    public static getCallTraceOnForkBundle<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceOnForkBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceOnForkBundleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/bundle/{bundleId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run Simulation
     */
    public static simulateTransactionOnFork<ThrowOnError extends boolean = false>(options: Options<solidity_service.SimulateTransactionOnForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<solidity_service.SimulateTransactionOnForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by simulation
     */
    public static getCallTraceOnForkSimulation<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceOnForkSimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceOnForkSimulationResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation/{simulationId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run bundle simulation
     */
    public static simulateTransactionBundleOnFork<ThrowOnError extends boolean = false>(options: Options<solidity_service.SimulateTransactionBundleOnForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<solidity_service.SimulateTransactionBundleOnForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation_bundle',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by transaction
     */
    public static getCallTraceOnForkTransaction<ThrowOnError extends boolean = false>(options: Options<google.GetCallTraceOnForkTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<google.GetCallTraceOnForkTransactionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/transaction/{txHash}/call_trace',
            ...options
        });
    }
    
    /**
     * Delete fork by id
     */
    public static deleteFork<ThrowOnError extends boolean = false>(options: Options<solidit_service.DeleteForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<solidit_service.DeleteForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options
        });
    }
    
    /**
     * Get fork by id
     */
    public static getFork<ThrowOnError extends boolean = false>(options: Options<solidity_service.GetForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.GetForkResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options
        });
    }
    
    /**
     * Update fork by id
     */
    public static updateFork<ThrowOnError extends boolean = false>(options: Options<solidity_service.UpdateForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<solidity_service.UpdateForkResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get fork info by id
     */
    public static getForkInfo<ThrowOnError extends boolean = false>(options: Options<solidity_service.GetForkInfoData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<solidity_service.GetForkInfoResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}/info',
            ...options
        });
    }
    
}