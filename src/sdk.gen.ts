// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SaveAlertRuleData, SaveAlertRuleResponse, GetAlertRulesData, GetAlertRulesResponse, DeleteAlertRuleData, DeleteAlertRuleResponse, SaveAlertRule2Data, SaveAlertRule2Response, GetAlertData, GetAlertResponse, CancelSqlQueryData, CancelSqlQueryResponse, ExecuteSqlData, ExecuteSqlResponse, ExecuteSqlAsyncData, ExecuteSqlAsyncResponse, QuerySqlExecutionDetailData, QuerySqlExecutionDetailResponse, QuerySqlResultData, QuerySqlResultResponse, SaveSqlData, SaveSqlResponse, SaveSql2Data, SaveSql2Response, ListDashboardsData, ListDashboardsResponse, ImportDashboardData, ImportDashboardResponse, DeleteDashboardData, DeleteDashboardResponse, GetDashboardData, GetDashboardResponse, ExportDashboardData, ExportDashboardResponse, QueryLogData, QueryLogResponse, QueryLog2Data, QueryLog2Response, ListCoins2Data, ListCoins2Response, ListCoinsData, ListCoinsResponse, QueryData, QueryResponse, GetMetricsData, GetMetricsResponse, QueryInstantData, QueryInstantResponse, QueryRangeData, QueryRangeResponse, GetPriceData, GetPriceResponse, AddCoinByGeckoData, AddCoinByGeckoResponse, BatchGetPricesData, BatchGetPricesResponse, CheckLatestPriceData, CheckLatestPriceResponse, PriceListCoinsData, PriceListCoinsResponse, GetProcessorStatusV2Data, GetProcessorStatusV2Response, GetProjectData, GetProjectResponse, GetProjectByIdData, GetProjectByIdResponse, GetProjectListData, GetProjectListResponse, ListDashboards2Data, ListDashboards2Response, GetDashboard2Data, GetDashboard2Response, GetEstimatedGasPriceData, GetEstimatedGasPriceResponse, ListForksData, ListForksResponse, CreateForkData, CreateForkResponse, GetCallTraceOnForkBundleData, GetCallTraceOnForkBundleResponse, SimulateTransactionOnForkData, SimulateTransactionOnForkResponse, GetCallTraceOnForkSimulationData, GetCallTraceOnForkSimulationResponse, SimulateTransactionBundleOnForkData, SimulateTransactionBundleOnForkResponse, GetCallTraceOnForkTransactionData, GetCallTraceOnForkTransactionResponse, DeleteForkData, DeleteForkResponse, GetForkData, GetForkResponse, UpdateForkData, UpdateForkResponse, GetForkInfoData, GetForkInfoResponse, SearchTransactionsData, SearchTransactionsResponse, GetSimulationsData, GetSimulationsResponse, GetSimulationData, GetSimulationResponse, GetSimulationBundleInProjectData, GetSimulationBundleInProjectResponse, GetCallTraceByBundleData, GetCallTraceByBundleResponse, SimulateTransactionData, SimulateTransactionResponse, GetCallTraceBySimulationData, GetCallTraceBySimulationResponse, SimulateTransactionBundleData, SimulateTransactionBundleResponse, GetCallTraceByTransactionData, GetCallTraceByTransactionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AlertsService {
    /**
     * Save an alert rule
     */
    public static saveAlertRule<ThrowOnError extends boolean = false>(options: Options<SaveAlertRuleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SaveAlertRuleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * List all alert rules for a project
     */
    public static getAlertRules<ThrowOnError extends boolean = false>(options: Options<GetAlertRulesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAlertRulesResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/project/{projectId}',
            ...options
        });
    }
    
    /**
     * Delete an alert rule
     */
    public static deleteAlertRule<ThrowOnError extends boolean = false>(options: Options<DeleteAlertRuleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteAlertRuleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/{id}',
            ...options
        });
    }
    
    /**
     * Save an alert rule
     */
    public static saveAlertRule2<ThrowOnError extends boolean = false>(options: Options<SaveAlertRule2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<SaveAlertRule2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/rule/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Find an alert rule by id, and list all alerts for this rule
     */
    public static getAlert<ThrowOnError extends boolean = false>(options: Options<GetAlertData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAlertResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/alerts/{ruleId}',
            ...options
        });
    }
    
}

export class DataService {
    /**
     * Cancel SQL Query
     * Cancel a SQL query by execution_id.
     */
    public static cancelSqlQuery<ThrowOnError extends boolean = false>(options: Options<CancelSqlQueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<CancelSqlQueryResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/cancel_query/{executionId}',
            ...options
        });
    }
    
    /**
     * Execute SQL
     * Execute SQL in a project. Go to "Data Studio" -> "SQL Editor", write your query and then click "Export as cURL"
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(102).png)
     *
     * Find more: https://docs.sentio.xyz/reference/data#sql-api
     */
    public static executeSql<ThrowOnError extends boolean = false>(options: Options<ExecuteSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ExecuteSqlResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Execute SQL by Async
     * Execute SQL in a project asynchronously.
     */
    public static executeSqlAsync<ThrowOnError extends boolean = false>(options: Options<ExecuteSqlAsyncData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ExecuteSqlAsyncResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/execute/async',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query SQL Execution Detail
     * Query the execution detail of a SQL query by execution_id.
     */
    public static querySqlExecutionDetail<ThrowOnError extends boolean = false>(options: Options<QuerySqlExecutionDetailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<QuerySqlExecutionDetailResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/query_execution_detail/{executionId}',
            ...options
        });
    }
    
    /**
     * Query SQL Result
     * Query the result of a SQL query by execution_id.
     */
    public static querySqlResult<ThrowOnError extends boolean = false>(options: Options<QuerySqlResultData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<QuerySqlResultResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/query_result/{executionId}',
            ...options
        });
    }
    
    /**
     * Save SQL
     * Save or update a SQL query in a project.
     */
    public static saveSql<ThrowOnError extends boolean = false>(options: Options<SaveSqlData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SaveSqlResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/save',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Save SQL
     * Save or update a SQL query in a project.
     */
    public static saveSql2<ThrowOnError extends boolean = false>(options: Options<SaveSql2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<SaveSql2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/analytics/{owner}/{slug}/sql/save',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query event logs
     */
    public static queryLog<ThrowOnError extends boolean = false>(options: Options<QueryLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<QueryLogResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/eventlogs/{owner}/{slug}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Query event logs
     */
    public static queryLog2<ThrowOnError extends boolean = false>(options: Options<QueryLog2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<QueryLog2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/eventlogs/{owner}/{slug}/query',
            ...options
        });
    }
    
    /**
     * List coins
     * Get a list of coins in a project.
     */
    public static listCoins2<ThrowOnError extends boolean = false>(options?: Options<ListCoins2Data, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ListCoins2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/coins',
            ...options
        });
    }
    
    /**
     * List coins
     * Get a list of coins in a project.
     */
    public static listCoins<ThrowOnError extends boolean = false>(options: Options<ListCoinsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ListCoinsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/{owner}/{slug}/coins',
            ...options
        });
    }
    
    /**
     * Insight Query
     * Query for metrics,event logs and coin prices in a project.
     */
    public static query<ThrowOnError extends boolean = false>(options: Options<QueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<QueryResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/insights/{owner}/{slug}/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get a list of metrics in a project
     */
    public static getMetrics<ThrowOnError extends boolean = false>(options?: Options<GetMetricsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMetricsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics',
            ...options
        });
    }
    
    /**
     * Metric instant queries
     */
    public static queryInstant<ThrowOnError extends boolean = false>(options: Options<QueryInstantData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<QueryInstantResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics/{owner}/{slug}/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Metric range queries
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(101).png)
     */
    public static queryRange<ThrowOnError extends boolean = false>(options: Options<QueryRangeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<QueryRangeResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/metrics/{owner}/{slug}/query_range',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class WebService {
    /**
     * List all dashboards in a project
     */
    public static listDashboards<ThrowOnError extends boolean = false>(options?: Options<ListDashboardsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ListDashboardsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards',
            ...options
        });
    }
    
    /**
     * Import a dashboard to another dashboard
     */
    public static importDashboard<ThrowOnError extends boolean = false>(options: Options<ImportDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ImportDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/json',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Delete a dashboard by id
     */
    public static deleteDashboard<ThrowOnError extends boolean = false>(options: Options<DeleteDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}',
            ...options
        });
    }
    
    /**
     * Get a dashboard by id
     */
    public static getDashboard<ThrowOnError extends boolean = false>(options: Options<GetDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}',
            ...options
        });
    }
    
    /**
     * Export a dashboard to json
     */
    public static exportDashboard<ThrowOnError extends boolean = false>(options: Options<ExportDashboardData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ExportDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/dashboards/{dashboardId}/json',
            ...options
        });
    }
    
    /**
     * Get project details
     */
    public static getProject<ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProjectResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/project/{owner}/{slug}',
            ...options
        });
    }
    
    /**
     * Get project details
     */
    public static getProjectById<ThrowOnError extends boolean = false>(options: Options<GetProjectByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProjectByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/project/{projectId}',
            ...options
        });
    }
    
    /**
     * Get project list
     */
    public static getProjectList<ThrowOnError extends boolean = false>(options?: Options<GetProjectListData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProjectListResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects',
            ...options
        });
    }
    
    /**
     * List all dashboards in a project
     */
    public static listDashboards2<ThrowOnError extends boolean = false>(options: Options<ListDashboards2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ListDashboards2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects/{owner}/{slug}/dashboards',
            ...options
        });
    }
    
    /**
     * Get a dashboard by id
     */
    public static getDashboard2<ThrowOnError extends boolean = false>(options: Options<GetDashboard2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDashboard2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/projects/{owner}/{slug}/dashboards/{dashboardId}',
            ...options
        });
    }
    
}

export class PriceService {
    /**
     * Get price
     * GetPrice returns the price of a given coin identifier, in a best effort way.
     * If we do not have any price data for the given coin, we will return NOT_FOUND error.
     * If we have at least one price data for the given coin, we will return it with the actual timestamp.
     * Client is responsible for checking the timestamp and decide whether to use the price or not.
     */
    public static getPrice<ThrowOnError extends boolean = false>(options?: Options<GetPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPriceResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices',
            ...options
        });
    }
    
    /**
     * Add coin by Gecko
     * adds a coin by its coingecko id.
     *
     * coingecko id the API ID of the coin in coingecko web page.
     *
     * please AWARE that the coingecko id is NOT the same as the symbol of the coin.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/coingecko_apiid.png)
     */
    public static addCoinByGecko<ThrowOnError extends boolean = false>(options: Options<AddCoinByGeckoData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AddCoinByGeckoResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/add_coin_by_gecko',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Batch get prices
     */
    public static batchGetPrices<ThrowOnError extends boolean = false>(options: Options<BatchGetPricesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<BatchGetPricesResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/batch',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Check latest price
     */
    public static checkLatestPrice<ThrowOnError extends boolean = false>(options?: Options<CheckLatestPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<CheckLatestPriceResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/check_latest',
            ...options
        });
    }
    
    /**
     * List coins
     */
    public static priceListCoins<ThrowOnError extends boolean = false>(options?: Options<PriceListCoinsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<PriceListCoinsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/prices/coins',
            ...options
        });
    }
    
}

export class ProcessorService {
    /**
     * Get processor status
     */
    public static getProcessorStatusV2<ThrowOnError extends boolean = false>(options: Options<GetProcessorStatusV2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProcessorStatusV2Response, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/processors/{owner}/{slug}/status',
            ...options
        });
    }
    
}

export class DebugAndSimulationService {
    /**
     * Estimate gas price
     */
    public static getEstimatedGasPrice<ThrowOnError extends boolean = false>(options?: Options<GetEstimatedGasPriceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEstimatedGasPriceResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/estimated_gas_price',
            ...options
        });
    }
    
    /**
     * Search transactions
     */
    public static searchTransactions<ThrowOnError extends boolean = false>(options: Options<SearchTransactionsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<SearchTransactionsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/search_transactions',
            ...options
        });
    }
    
    /**
     * Get list of simulations
     */
    public static getSimulations<ThrowOnError extends boolean = false>(options: Options<GetSimulationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSimulationsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation',
            ...options
        });
    }
    
    /**
     * Get simulation by ID
     */
    public static getSimulation<ThrowOnError extends boolean = false>(options: Options<GetSimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSimulationResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation/{simulationId}',
            ...options
        });
    }
    
    /**
     * Get bundle simulation by ID
     */
    public static getSimulationBundleInProject<ThrowOnError extends boolean = false>(options: Options<GetSimulationBundleInProjectData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSimulationBundleInProjectResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/simulation_bundle/{bundleId}',
            ...options
        });
    }
    
    /**
     * Get trace by bundle simulation
     */
    public static getCallTraceByBundle<ThrowOnError extends boolean = false>(options: Options<GetCallTraceByBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceByBundleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/bundle/{bundleId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run simulation
     * Create a new transaction simulation. The simulation body should be included in the request body.
     * Your simulations will be saved, and a unique ID for each simulation is included in the response. It will be useful for fetching simulation details.
     */
    public static simulateTransaction<ThrowOnError extends boolean = false>(options: Options<SimulateTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SimulateTransactionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by simulation
     */
    public static getCallTraceBySimulation<ThrowOnError extends boolean = false>(options: Options<GetCallTraceBySimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceBySimulationResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation/{simulationId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run bundle simulation
     * You could also create bundle simulations so that one transaction could be executed one after another. For `blockNumber` `transactionIndex` `networkId` `stateOverrides` and `blockOverrides` fields, only the first simulation takes effect.
     */
    public static simulateTransactionBundle<ThrowOnError extends boolean = false>(options: Options<SimulateTransactionBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SimulateTransactionBundleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/simulation_bundle',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by transaction
     * API to get Sentio call trace. It takes `txId.txHash` and `chainSpec.chainId` arguments, where the first is transaction hash, and the second is the numeric ethereum chain ID.
     *
     * The results looks very similar to the normal [Ethereum call trace](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(2)%20(1)%20(1)%20(1).png). But we have an additional `startIndex` and `startIndex` on each trace entry even for the LOG, representing the execution order in the trace.
     *
     * This allows you to build chart that marks the order of fund flow.
     *
     * ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/v1.0/assets/image%20(2)%20(1)%20(1)%20(1).png)
     */
    public static getCallTraceByTransaction<ThrowOnError extends boolean = false>(options: Options<GetCallTraceByTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceByTransactionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/{chainId}/transaction/{txHash}/call_trace',
            ...options
        });
    }
    
}

export class ForksService {
    /**
     * List all forks
     */
    public static listForks<ThrowOnError extends boolean = false>(options: Options<ListForksData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ListForksResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork',
            ...options
        });
    }
    
    /**
     * Create a fork
     */
    public static createFork<ThrowOnError extends boolean = false>(options: Options<CreateForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by bundle simulation
     */
    public static getCallTraceOnForkBundle<ThrowOnError extends boolean = false>(options: Options<GetCallTraceOnForkBundleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceOnForkBundleResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/bundle/{bundleId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run Simulation
     */
    public static simulateTransactionOnFork<ThrowOnError extends boolean = false>(options: Options<SimulateTransactionOnForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SimulateTransactionOnForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by simulation
     */
    public static getCallTraceOnForkSimulation<ThrowOnError extends boolean = false>(options: Options<GetCallTraceOnForkSimulationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceOnForkSimulationResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation/{simulationId}/call_trace',
            ...options
        });
    }
    
    /**
     * Run bundle simulation
     */
    public static simulateTransactionBundleOnFork<ThrowOnError extends boolean = false>(options: Options<SimulateTransactionBundleOnForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SimulateTransactionBundleOnForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/simulation_bundle',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get trace by transaction
     */
    public static getCallTraceOnForkTransaction<ThrowOnError extends boolean = false>(options: Options<GetCallTraceOnForkTransactionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCallTraceOnForkTransactionResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{forkId}/transaction/{txHash}/call_trace',
            ...options
        });
    }
    
    /**
     * Delete fork by id
     */
    public static deleteFork<ThrowOnError extends boolean = false>(options: Options<DeleteForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options
        });
    }
    
    /**
     * Get fork by id
     */
    public static getFork<ThrowOnError extends boolean = false>(options: Options<GetForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options
        });
    }
    
    /**
     * Update fork by id
     */
    public static updateFork<ThrowOnError extends boolean = false>(options: Options<UpdateForkData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateForkResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Get fork info by id
     */
    public static getForkInfo<ThrowOnError extends boolean = false>(options: Options<GetForkInfoData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetForkInfoResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'api-key',
                    type: 'apiKey'
                },
                {
                    in: 'query',
                    name: 'api-key',
                    type: 'apiKey'
                }
            ],
            url: '/api/v1/solidity/{owner}/{slug}/fork/{id}/info',
            ...options
        });
    }
    
}